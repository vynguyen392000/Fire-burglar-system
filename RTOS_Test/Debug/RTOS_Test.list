
RTOS_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005450  08005450  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08005450  08005450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005458  08005458  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08005460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040c4  20000034  08005494  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040f8  08005494  000240f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efb1  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002733  00000000  00000000  0002f015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00031748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  000323c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222f2  00000000  00000000  00032f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7d2  00000000  00000000  00055242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d673a  00000000  00000000  00062a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013914e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003408  00000000  00000000  001391a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000034 	.word	0x20000034
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005364 	.word	0x08005364

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000038 	.word	0x20000038
 80001cc:	08005364 	.word	0x08005364

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b96e 	b.w	8000e20 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468c      	mov	ip, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8083 	bne.w	8000c72 <__udivmoddi4+0x116>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4617      	mov	r7, r2
 8000b70:	d947      	bls.n	8000c02 <__udivmoddi4+0xa6>
 8000b72:	fab2 f282 	clz	r2, r2
 8000b76:	b142      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b78:	f1c2 0020 	rsb	r0, r2, #32
 8000b7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b80:	4091      	lsls	r1, r2
 8000b82:	4097      	lsls	r7, r2
 8000b84:	ea40 0c01 	orr.w	ip, r0, r1
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbbc f6f8 	udiv	r6, ip, r8
 8000b94:	fa1f fe87 	uxth.w	lr, r7
 8000b98:	fb08 c116 	mls	r1, r8, r6, ip
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bae:	f080 8119 	bcs.w	8000de4 <__udivmoddi4+0x288>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8116 	bls.w	8000de4 <__udivmoddi4+0x288>
 8000bb8:	3e02      	subs	r6, #2
 8000bba:	443b      	add	r3, r7
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd0:	45a6      	cmp	lr, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8105 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bde:	45a6      	cmp	lr, r4
 8000be0:	f240 8102 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000be4:	3802      	subs	r0, #2
 8000be6:	443c      	add	r4, r7
 8000be8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bec:	eba4 040e 	sub.w	r4, r4, lr
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	b11d      	cbz	r5, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xaa>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d150      	bne.n	8000cb0 <__udivmoddi4+0x154>
 8000c0e:	1bcb      	subs	r3, r1, r7
 8000c10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c14:	fa1f f887 	uxth.w	r8, r7
 8000c18:	2601      	movs	r6, #1
 8000c1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c1e:	0c21      	lsrs	r1, r4, #16
 8000c20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c28:	fb08 f30c 	mul.w	r3, r8, ip
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000c30:	1879      	adds	r1, r7, r1
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0xe2>
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	f200 80e9 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1ac9      	subs	r1, r1, r3
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x10c>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x10a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80d9 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e7bf      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x12e>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80b1 	beq.w	8000dde <__udivmoddi4+0x282>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x1cc>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0x140>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80b8 	bhi.w	8000e0c <__udivmoddi4+0x2b0>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0a8      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000caa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cae:	e7a5      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cb8:	4097      	lsls	r7, r2
 8000cba:	fa01 f002 	lsl.w	r0, r1, r2
 8000cbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc2:	40d9      	lsrs	r1, r3
 8000cc4:	4330      	orrs	r0, r6
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ccc:	fa1f f887 	uxth.w	r8, r7
 8000cd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd8:	fb06 f108 	mul.w	r1, r6, r8
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x19c>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cea:	f080 808d 	bcs.w	8000e08 <__udivmoddi4+0x2ac>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 808a 	bls.w	8000e08 <__udivmoddi4+0x2ac>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b281      	uxth	r1, r0
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d08:	fb00 f308 	mul.w	r3, r0, r8
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x1c4>
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d16:	d273      	bcs.n	8000e00 <__udivmoddi4+0x2a4>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d971      	bls.n	8000e00 <__udivmoddi4+0x2a4>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4439      	add	r1, r7
 8000d20:	1acb      	subs	r3, r1, r3
 8000d22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d26:	e778      	b.n	8000c1a <__udivmoddi4+0xbe>
 8000d28:	f1c6 0c20 	rsb	ip, r6, #32
 8000d2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d34:	431c      	orrs	r4, r3
 8000d36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d46:	431f      	orrs	r7, r3
 8000d48:	0c3b      	lsrs	r3, r7, #16
 8000d4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d4e:	fa1f f884 	uxth.w	r8, r4
 8000d52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d5e:	458a      	cmp	sl, r1
 8000d60:	fa02 f206 	lsl.w	r2, r2, r6
 8000d64:	fa00 f306 	lsl.w	r3, r0, r6
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x220>
 8000d6a:	1861      	adds	r1, r4, r1
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	d248      	bcs.n	8000e04 <__udivmoddi4+0x2a8>
 8000d72:	458a      	cmp	sl, r1
 8000d74:	d946      	bls.n	8000e04 <__udivmoddi4+0x2a8>
 8000d76:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7a:	4421      	add	r1, r4
 8000d7c:	eba1 010a 	sub.w	r1, r1, sl
 8000d80:	b2bf      	uxth	r7, r7
 8000d82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d8e:	fb00 f808 	mul.w	r8, r0, r8
 8000d92:	45b8      	cmp	r8, r7
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x24a>
 8000d96:	19e7      	adds	r7, r4, r7
 8000d98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9c:	d22e      	bcs.n	8000dfc <__udivmoddi4+0x2a0>
 8000d9e:	45b8      	cmp	r8, r7
 8000da0:	d92c      	bls.n	8000dfc <__udivmoddi4+0x2a0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	4427      	add	r7, r4
 8000da6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000daa:	eba7 0708 	sub.w	r7, r7, r8
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	454f      	cmp	r7, r9
 8000db4:	46c6      	mov	lr, r8
 8000db6:	4649      	mov	r1, r9
 8000db8:	d31a      	bcc.n	8000df0 <__udivmoddi4+0x294>
 8000dba:	d017      	beq.n	8000dec <__udivmoddi4+0x290>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x27a>
 8000dbe:	ebb3 020e 	subs.w	r2, r3, lr
 8000dc2:	eb67 0701 	sbc.w	r7, r7, r1
 8000dc6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dca:	40f2      	lsrs	r2, r6
 8000dcc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dd0:	40f7      	lsrs	r7, r6
 8000dd2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e70b      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0x60>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6fd      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000dec:	4543      	cmp	r3, r8
 8000dee:	d2e5      	bcs.n	8000dbc <__udivmoddi4+0x260>
 8000df0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000df4:	eb69 0104 	sbc.w	r1, r9, r4
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7df      	b.n	8000dbc <__udivmoddi4+0x260>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e7d2      	b.n	8000da6 <__udivmoddi4+0x24a>
 8000e00:	4660      	mov	r0, ip
 8000e02:	e78d      	b.n	8000d20 <__udivmoddi4+0x1c4>
 8000e04:	4681      	mov	r9, r0
 8000e06:	e7b9      	b.n	8000d7c <__udivmoddi4+0x220>
 8000e08:	4666      	mov	r6, ip
 8000e0a:	e775      	b.n	8000cf8 <__udivmoddi4+0x19c>
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e74a      	b.n	8000ca6 <__udivmoddi4+0x14a>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	4439      	add	r1, r7
 8000e16:	e713      	b.n	8000c40 <__udivmoddi4+0xe4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	443c      	add	r4, r7
 8000e1c:	e724      	b.n	8000c68 <__udivmoddi4+0x10c>
 8000e1e:	bf00      	nop

08000e20 <__aeabi_idiv0>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <vApplicationGetIdleTaskMemory+0x30>)
 8000e3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2280      	movs	r2, #128	; 0x80
 8000e40:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000050 	.word	0x20000050
 8000e54:	200000a4 	.word	0x200000a4

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b5b0      	push	{r4, r5, r7, lr}
 8000e5a:	b08e      	sub	sp, #56	; 0x38
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5e:	f000 fcfd 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e62:	f000 f887 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e66:	f000 f97f 	bl	8001168 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e6a:	f000 f95d 	bl	8001128 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e6e:	f000 f931 	bl	80010d4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000e72:	f000 f8dd 	bl	8001030 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
 // HAL_ADC_Start_DMA(&hadc1, &adc_value,1);
  //HAL_ADC_Start(&hadc1);
 // HAL_ADC_PollForConversion(&hadc1, 1000);

  HAL_UART_Transmit(&huart3, "AT\r\n",strlen("AT\r\n"), 1000);
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	4932      	ldr	r1, [pc, #200]	; (8000f48 <main+0xf0>)
 8000e7e:	4833      	ldr	r0, [pc, #204]	; (8000f4c <main+0xf4>)
 8000e80:	f002 fc79 	bl	8003776 <HAL_UART_Transmit>
  HAL_Delay(2000);
 8000e84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e88:	f000 fd5a 	bl	8001940 <HAL_Delay>
    HAL_UART_Transmit(&huart3, "ATE0\r\n",strlen("ATE0\r\n"), 1000);
 8000e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e90:	2206      	movs	r2, #6
 8000e92:	492f      	ldr	r1, [pc, #188]	; (8000f50 <main+0xf8>)
 8000e94:	482d      	ldr	r0, [pc, #180]	; (8000f4c <main+0xf4>)
 8000e96:	f002 fc6e 	bl	8003776 <HAL_UART_Transmit>
    HAL_Delay(2000);
 8000e9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e9e:	f000 fd4f 	bl	8001940 <HAL_Delay>
    HAL_UART_Transmit(&huart3, "AT+IPR=9600\r\n",strlen("AT+IPR=9600\r\n"), 1000);
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	220d      	movs	r2, #13
 8000ea8:	492a      	ldr	r1, [pc, #168]	; (8000f54 <main+0xfc>)
 8000eaa:	4828      	ldr	r0, [pc, #160]	; (8000f4c <main+0xf4>)
 8000eac:	f002 fc63 	bl	8003776 <HAL_UART_Transmit>
    HAL_Delay(2000);
 8000eb0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000eb4:	f000 fd44 	bl	8001940 <HAL_Delay>
    HAL_UART_Transmit(&huart3, "AT+CMGF=1\r\n",strlen("AT+CMGF=1\r\n"), 1000);
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	220b      	movs	r2, #11
 8000ebe:	4926      	ldr	r1, [pc, #152]	; (8000f58 <main+0x100>)
 8000ec0:	4822      	ldr	r0, [pc, #136]	; (8000f4c <main+0xf4>)
 8000ec2:	f002 fc58 	bl	8003776 <HAL_UART_Transmit>
    HAL_Delay(2000);
 8000ec6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000eca:	f000 fd39 	bl	8001940 <HAL_Delay>
    HAL_UART_Transmit(&huart3, "AT+CLIP=1\r\n",strlen("AT+CLIP=1\r\n"), 1000);
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	220b      	movs	r2, #11
 8000ed4:	4921      	ldr	r1, [pc, #132]	; (8000f5c <main+0x104>)
 8000ed6:	481d      	ldr	r0, [pc, #116]	; (8000f4c <main+0xf4>)
 8000ed8:	f002 fc4d 	bl	8003776 <HAL_UART_Transmit>
    HAL_Delay(2000);
 8000edc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ee0:	f000 fd2e 	bl	8001940 <HAL_Delay>
    HAL_UART_Transmit(&huart3, "AT+CNMI=2,2\r\n",strlen("AT+CNMI=2,2\r\n"), 1000);
 8000ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee8:	220d      	movs	r2, #13
 8000eea:	491d      	ldr	r1, [pc, #116]	; (8000f60 <main+0x108>)
 8000eec:	4817      	ldr	r0, [pc, #92]	; (8000f4c <main+0xf4>)
 8000eee:	f002 fc42 	bl	8003776 <HAL_UART_Transmit>
    HAL_Delay(2000);
 8000ef2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ef6:	f000 fd23 	bl	8001940 <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, start_task1, osPriorityNormal, 0, 128);
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <main+0x10c>)
 8000efc:	f107 041c 	add.w	r4, r7, #28
 8000f00:	461d      	mov	r5, r3
 8000f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 fef2 	bl	8003cfe <osThreadCreate>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <main+0x110>)
 8000f1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, start_task2, osPriorityNormal, 0, 128);
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <main+0x114>)
 8000f22:	463c      	mov	r4, r7
 8000f24:	461d      	mov	r5, r3
 8000f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8000f32:	463b      	mov	r3, r7
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 fee1 	bl	8003cfe <osThreadCreate>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <main+0x118>)
 8000f40:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f42:	f002 fed5 	bl	8003cf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <main+0xee>
 8000f48:	0800538c 	.word	0x0800538c
 8000f4c:	20003ff8 	.word	0x20003ff8
 8000f50:	08005394 	.word	0x08005394
 8000f54:	0800539c 	.word	0x0800539c
 8000f58:	080053ac 	.word	0x080053ac
 8000f5c:	080053b8 	.word	0x080053b8
 8000f60:	080053c4 	.word	0x080053c4
 8000f64:	080053d4 	.word	0x080053d4
 8000f68:	2000403c 	.word	0x2000403c
 8000f6c:	080053f0 	.word	0x080053f0
 8000f70:	200040f0 	.word	0x200040f0

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0320 	add.w	r3, r7, #32
 8000f7e:	2230      	movs	r2, #48	; 0x30
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 f9e6 	bl	8005354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <SystemClock_Config+0xb4>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a21      	ldr	r2, [pc, #132]	; (8001028 <SystemClock_Config+0xb4>)
 8000fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <SystemClock_Config+0xb4>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <SystemClock_Config+0xb8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	; (800102c <SystemClock_Config+0xb8>)
 8000fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <SystemClock_Config+0xb8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd8:	2310      	movs	r3, #16
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 ff31 	bl	8002e4c <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ff0:	f000 fad8 	bl	80015a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f002 f994 	bl	800333c <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800101a:	f000 fac3 	bl	80015a4 <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3750      	adds	r7, #80	; 0x50
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <MX_ADC1_Init+0x9c>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_ADC1_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_ADC1_Init+0x98>)
 800105c:	2201      	movs	r2, #1
 800105e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_ADC1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <MX_ADC1_Init+0xa0>)
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_ADC1_Init+0x98>)
 800107c:	2201      	movs	r2, #1
 800107e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_ADC1_Init+0x98>)
 800108a:	2201      	movs	r2, #1
 800108c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001090:	f000 fc7a 	bl	8001988 <HAL_ADC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 fa83 	bl	80015a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800109e:	2302      	movs	r3, #2
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <MX_ADC1_Init+0x98>)
 80010b0:	f000 fddc 	bl	8001c6c <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010ba:	f000 fa73 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20004044 	.word	0x20004044
 80010cc:	40012000 	.word	0x40012000
 80010d0:	0f000001 	.word	0x0f000001

080010d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <MX_USART3_UART_Init+0x50>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 80010e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 800110c:	f002 fae6 	bl	80036dc <HAL_UART_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001116:	f000 fa45 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20003ff8 	.word	0x20003ff8
 8001124:	40004800 	.word	0x40004800

08001128 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_DMA_Init+0x3c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <MX_DMA_Init+0x3c>)
 8001138:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_DMA_Init+0x3c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2105      	movs	r1, #5
 800114e:	2038      	movs	r0, #56	; 0x38
 8001150:	f001 f907 	bl	8002362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001154:	2038      	movs	r0, #56	; 0x38
 8001156:	f001 f920 	bl	800239a <HAL_NVIC_EnableIRQ>

}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MX_GPIO_Init+0xd0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <MX_GPIO_Init+0xd0>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <MX_GPIO_Init+0xd0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_GPIO_Init+0xd4>)
 80011f6:	f001 fe0f 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011fa:	2303      	movs	r3, #3
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <MX_GPIO_Init+0xd8>)
 800120e:	f001 fc4f 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001212:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_GPIO_Init+0xd4>)
 800122c:	f001 fc40 	bl	8002ab0 <HAL_GPIO_Init>

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	; 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40020000 	.word	0x40020000

08001244 <start_task1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_task1 */
void start_task1(void const * argument)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	static uint8_t data6=0x1A;
  /* Infinite loop */
  for(;;)
  {

	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1)
 800124c:	2102      	movs	r1, #2
 800124e:	484e      	ldr	r0, [pc, #312]	; (8001388 <start_task1+0x144>)
 8001250:	f001 fdca 	bl	8002de8 <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	2b01      	cmp	r3, #1
 8001258:	f040 8087 	bne.w	800136a <start_task1+0x126>
			{	vTaskSuspend(task2Handle);
 800125c:	4b4b      	ldr	r3, [pc, #300]	; (800138c <start_task1+0x148>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f003 f805 	bl	8004270 <vTaskSuspend>
			 uint8_t data1[]="AT+CMGS=\"" ;
 8001266:	4a4a      	ldr	r2, [pc, #296]	; (8001390 <start_task1+0x14c>)
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	ca07      	ldmia	r2, {r0, r1, r2}
 800126e:	c303      	stmia	r3!, {r0, r1}
 8001270:	801a      	strh	r2, [r3, #0]
			   	uint8_t data2[]="0964475617";
 8001272:	4a48      	ldr	r2, [pc, #288]	; (8001394 <start_task1+0x150>)
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	ca07      	ldmia	r2, {r0, r1, r2}
 800127a:	c303      	stmia	r3!, {r0, r1}
 800127c:	801a      	strh	r2, [r3, #0]
 800127e:	3302      	adds	r3, #2
 8001280:	0c12      	lsrs	r2, r2, #16
 8001282:	701a      	strb	r2, [r3, #0]
			    uint8_t data3[]="\"";
 8001284:	2322      	movs	r3, #34	; 0x22
 8001286:	81bb      	strh	r3, [r7, #12]
			    uint8_t data4[]="\r\n";
 8001288:	4a43      	ldr	r2, [pc, #268]	; (8001398 <start_task1+0x154>)
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	4611      	mov	r1, r2
 8001292:	8019      	strh	r1, [r3, #0]
 8001294:	3302      	adds	r3, #2
 8001296:	0c12      	lsrs	r2, r2, #16
 8001298:	701a      	strb	r2, [r3, #0]
			    HAL_UART_Transmit(&huart3, data1,strlen(data1), 1000);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4618      	mov	r0, r3
 80012a0:	f7fe ff96 	bl	80001d0 <strlen>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f107 011c 	add.w	r1, r7, #28
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	483a      	ldr	r0, [pc, #232]	; (800139c <start_task1+0x158>)
 80012b2:	f002 fa60 	bl	8003776 <HAL_UART_Transmit>
			    HAL_UART_Transmit(&huart3, data2,strlen(data2), 1000);
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ff88 	bl	80001d0 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f107 0110 	add.w	r1, r7, #16
 80012c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012cc:	4833      	ldr	r0, [pc, #204]	; (800139c <start_task1+0x158>)
 80012ce:	f002 fa52 	bl	8003776 <HAL_UART_Transmit>
			    HAL_UART_Transmit(&huart3, data3,strlen(data3), 1000);
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7fe ff7a 	bl	80001d0 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	b29a      	uxth	r2, r3
 80012e0:	f107 010c 	add.w	r1, r7, #12
 80012e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e8:	482c      	ldr	r0, [pc, #176]	; (800139c <start_task1+0x158>)
 80012ea:	f002 fa44 	bl	8003776 <HAL_UART_Transmit>
			    HAL_UART_Transmit(&huart3, data4,strlen(data4), 1000);
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7fe ff6c 	bl	80001d0 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	f107 0108 	add.w	r1, r7, #8
 8001300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001304:	4825      	ldr	r0, [pc, #148]	; (800139c <start_task1+0x158>)
 8001306:	f002 fa36 	bl	8003776 <HAL_UART_Transmit>
			    HAL_Delay(500);
 800130a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130e:	f000 fb17 	bl	8001940 <HAL_Delay>
				static char data9[]="canh bao co trom";
				//gui_tin_nhan(data);
				HAL_UART_Transmit(&huart3, data9,strlen(data9), 100);
 8001312:	4823      	ldr	r0, [pc, #140]	; (80013a0 <start_task1+0x15c>)
 8001314:	f7fe ff5c 	bl	80001d0 <strlen>
 8001318:	4603      	mov	r3, r0
 800131a:	b29a      	uxth	r2, r3
 800131c:	2364      	movs	r3, #100	; 0x64
 800131e:	4920      	ldr	r1, [pc, #128]	; (80013a0 <start_task1+0x15c>)
 8001320:	481e      	ldr	r0, [pc, #120]	; (800139c <start_task1+0x158>)
 8001322:	f002 fa28 	bl	8003776 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, &data6,1, 100);
 8001326:	2364      	movs	r3, #100	; 0x64
 8001328:	2201      	movs	r2, #1
 800132a:	491e      	ldr	r1, [pc, #120]	; (80013a4 <start_task1+0x160>)
 800132c:	481b      	ldr	r0, [pc, #108]	; (800139c <start_task1+0x158>)
 800132e:	f002 fa22 	bl	8003776 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001338:	481b      	ldr	r0, [pc, #108]	; (80013a8 <start_task1+0x164>)
 800133a:	f001 fd6d 	bl	8002e18 <HAL_GPIO_WritePin>
				vTaskDelay(2500);
 800133e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001342:	f002 ff61 	bl	8004208 <vTaskDelay>
				vTaskResume(task2Handle);
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <start_task1+0x148>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f003 f854 	bl	80043f8 <vTaskResume>
				HAL_Delay(2500);
 8001350:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001354:	f000 faf4 	bl	8001940 <HAL_Delay>
			//	vTaskDelay(2500);
				taskYIELD();
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <start_task1+0x168>)
 800135a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	f3bf 8f4f 	dsb	sy
 8001364:	f3bf 8f6f 	isb	sy
 8001368:	e770      	b.n	800124c <start_task1+0x8>

			}
	else
	{	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <start_task1+0x164>)
 8001372:	f001 fd51 	bl	8002e18 <HAL_GPIO_WritePin>
		taskYIELD();
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <start_task1+0x168>)
 8001378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	f3bf 8f4f 	dsb	sy
 8001382:	f3bf 8f6f 	isb	sy
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1)
 8001386:	e761      	b.n	800124c <start_task1+0x8>
 8001388:	40020000 	.word	0x40020000
 800138c:	200040f0 	.word	0x200040f0
 8001390:	0800540c 	.word	0x0800540c
 8001394:	08005418 	.word	0x08005418
 8001398:	08005424 	.word	0x08005424
 800139c:	20003ff8 	.word	0x20003ff8
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000011 	.word	0x20000011
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	e000ed04 	.word	0xe000ed04

080013b0 <start_task2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_task2 */
void start_task2(void const * argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_task2 */
	static char data6=0x1A;
	//HAL_ADC_PollForConversion(&hadc1, 1000);
  /* Infinite loop */
  for(;;)
  {HAL_ADC_Start_DMA(&hadc1, &adc_value, 1);
 80013b8:	2201      	movs	r2, #1
 80013ba:	496d      	ldr	r1, [pc, #436]	; (8001570 <start_task2+0x1c0>)
 80013bc:	486d      	ldr	r0, [pc, #436]	; (8001574 <start_task2+0x1c4>)
 80013be:	f000 fb27 	bl	8001a10 <HAL_ADC_Start_DMA>
//	  HAL_ADC_PollForConversion(&hadc1, 1000);
//	  adc_value= HAL_ADC_GetValue(&hadc1);
	  volt=adc_value*3.3/4096;
 80013c2:	4b6b      	ldr	r3, [pc, #428]	; (8001570 <start_task2+0x1c0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f84c 	bl	8000464 <__aeabi_ui2d>
 80013cc:	a364      	add	r3, pc, #400	; (adr r3, 8001560 <start_task2+0x1b0>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7ff f8c1 	bl	8000558 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b65      	ldr	r3, [pc, #404]	; (8001578 <start_task2+0x1c8>)
 80013e4:	f7ff f9e2 	bl	80007ac <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fb4c 	bl	8000a8c <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a61      	ldr	r2, [pc, #388]	; (800157c <start_task2+0x1cc>)
 80013f8:	6013      	str	r3, [r2, #0]
  if(volt>2.2)
 80013fa:	4b60      	ldr	r3, [pc, #384]	; (800157c <start_task2+0x1cc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f852 	bl	80004a8 <__aeabi_f2d>
 8001404:	a358      	add	r3, pc, #352	; (adr r3, 8001568 <start_task2+0x1b8>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7ff fb35 	bl	8000a78 <__aeabi_dcmpgt>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 808d 	beq.w	8001530 <start_task2+0x180>
  {
	  vTaskSuspend(task1Handle);
 8001416:	4b5a      	ldr	r3, [pc, #360]	; (8001580 <start_task2+0x1d0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f002 ff28 	bl	8004270 <vTaskSuspend>
	  uint8_t data1[]="AT+CMGS=\"" ;
 8001420:	4a58      	ldr	r2, [pc, #352]	; (8001584 <start_task2+0x1d4>)
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	ca07      	ldmia	r2, {r0, r1, r2}
 8001428:	c303      	stmia	r3!, {r0, r1}
 800142a:	801a      	strh	r2, [r3, #0]
	    	uint8_t data2[]="0964475617";
 800142c:	4a56      	ldr	r2, [pc, #344]	; (8001588 <start_task2+0x1d8>)
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	ca07      	ldmia	r2, {r0, r1, r2}
 8001434:	c303      	stmia	r3!, {r0, r1}
 8001436:	801a      	strh	r2, [r3, #0]
 8001438:	3302      	adds	r3, #2
 800143a:	0c12      	lsrs	r2, r2, #16
 800143c:	701a      	strb	r2, [r3, #0]
	     uint8_t data3[]="\"";
 800143e:	2322      	movs	r3, #34	; 0x22
 8001440:	81bb      	strh	r3, [r7, #12]
	     uint8_t data4[]="\r\n";
 8001442:	4a52      	ldr	r2, [pc, #328]	; (800158c <start_task2+0x1dc>)
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	4611      	mov	r1, r2
 800144c:	8019      	strh	r1, [r3, #0]
 800144e:	3302      	adds	r3, #2
 8001450:	0c12      	lsrs	r2, r2, #16
 8001452:	701a      	strb	r2, [r3, #0]
	     HAL_UART_Transmit(&huart3, data1,strlen(data1), 1000);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe feb9 	bl	80001d0 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	f107 011c 	add.w	r1, r7, #28
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	4849      	ldr	r0, [pc, #292]	; (8001590 <start_task2+0x1e0>)
 800146c:	f002 f983 	bl	8003776 <HAL_UART_Transmit>
	     HAL_UART_Transmit(&huart3, data2,strlen(data2), 1000);
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe feab 	bl	80001d0 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	f107 0110 	add.w	r1, r7, #16
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	4842      	ldr	r0, [pc, #264]	; (8001590 <start_task2+0x1e0>)
 8001488:	f002 f975 	bl	8003776 <HAL_UART_Transmit>
	     HAL_UART_Transmit(&huart3, data3,strlen(data3), 1000);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe fe9d 	bl	80001d0 <strlen>
 8001496:	4603      	mov	r3, r0
 8001498:	b29a      	uxth	r2, r3
 800149a:	f107 010c 	add.w	r1, r7, #12
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	483b      	ldr	r0, [pc, #236]	; (8001590 <start_task2+0x1e0>)
 80014a4:	f002 f967 	bl	8003776 <HAL_UART_Transmit>
	     HAL_UART_Transmit(&huart3, data4,strlen(data4), 1000);
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe fe8f 	bl	80001d0 <strlen>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	f107 0108 	add.w	r1, r7, #8
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	4834      	ldr	r0, [pc, #208]	; (8001590 <start_task2+0x1e0>)
 80014c0:	f002 f959 	bl	8003776 <HAL_UART_Transmit>
	     HAL_Delay(500);
 80014c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c8:	f000 fa3a 	bl	8001940 <HAL_Delay>
	static char data[]="canh bao chay";
	//gui_tin_nhan(data);
	HAL_UART_Transmit(&huart3, data,strlen(data), 100);
 80014cc:	4831      	ldr	r0, [pc, #196]	; (8001594 <start_task2+0x1e4>)
 80014ce:	f7fe fe7f 	bl	80001d0 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	2364      	movs	r3, #100	; 0x64
 80014d8:	492e      	ldr	r1, [pc, #184]	; (8001594 <start_task2+0x1e4>)
 80014da:	482d      	ldr	r0, [pc, #180]	; (8001590 <start_task2+0x1e0>)
 80014dc:	f002 f94b 	bl	8003776 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, &data6,1, 100);
 80014e0:	2364      	movs	r3, #100	; 0x64
 80014e2:	2201      	movs	r2, #1
 80014e4:	492c      	ldr	r1, [pc, #176]	; (8001598 <start_task2+0x1e8>)
 80014e6:	482a      	ldr	r0, [pc, #168]	; (8001590 <start_task2+0x1e0>)
 80014e8:	f002 f945 	bl	8003776 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f2:	482a      	ldr	r0, [pc, #168]	; (800159c <start_task2+0x1ec>)
 80014f4:	f001 fc90 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fe:	4827      	ldr	r0, [pc, #156]	; (800159c <start_task2+0x1ec>)
 8001500:	f001 fc8a 	bl	8002e18 <HAL_GPIO_WritePin>

//	vTaskResume(task1Handle);

	vTaskDelay(2500);
 8001504:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001508:	f002 fe7e 	bl	8004208 <vTaskDelay>
	vTaskResume(task1Handle);
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <start_task2+0x1d0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f002 ff71 	bl	80043f8 <vTaskResume>
	HAL_Delay(2500);
 8001516:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800151a:	f000 fa11 	bl	8001940 <HAL_Delay>
//	if(volt>2.2)
//	{	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);
//		HAL_Delay(5000);
//	 }
	taskYIELD();
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <start_task2+0x1f0>)
 8001520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f3bf 8f4f 	dsb	sy
 800152a:	f3bf 8f6f 	isb	sy
 800152e:	e743      	b.n	80013b8 <start_task2+0x8>
  }
  else
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001536:	4819      	ldr	r0, [pc, #100]	; (800159c <start_task2+0x1ec>)
 8001538:	f001 fc6e 	bl	8002e18 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001542:	4816      	ldr	r0, [pc, #88]	; (800159c <start_task2+0x1ec>)
 8001544:	f001 fc68 	bl	8002e18 <HAL_GPIO_WritePin>
	  taskYIELD();
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <start_task2+0x1f0>)
 800154a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	f3bf 8f4f 	dsb	sy
 8001554:	f3bf 8f6f 	isb	sy
  {HAL_ADC_Start_DMA(&hadc1, &adc_value, 1);
 8001558:	e72e      	b.n	80013b8 <start_task2+0x8>
 800155a:	bf00      	nop
 800155c:	f3af 8000 	nop.w
 8001560:	66666666 	.word	0x66666666
 8001564:	400a6666 	.word	0x400a6666
 8001568:	9999999a 	.word	0x9999999a
 800156c:	40019999 	.word	0x40019999
 8001570:	20004040 	.word	0x20004040
 8001574:	20004044 	.word	0x20004044
 8001578:	40b00000 	.word	0x40b00000
 800157c:	200040ec 	.word	0x200040ec
 8001580:	2000403c 	.word	0x2000403c
 8001584:	0800540c 	.word	0x0800540c
 8001588:	08005418 	.word	0x08005418
 800158c:	08005424 	.word	0x08005424
 8001590:	20003ff8 	.word	0x20003ff8
 8001594:	20000014 	.word	0x20000014
 8001598:	20000022 	.word	0x20000022
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	e000ed04 	.word	0xe000ed04

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	e7fe      	b.n	80015ac <Error_Handler+0x8>
	...

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_MspInit+0x54>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a11      	ldr	r2, [pc, #68]	; (8001604 <HAL_MspInit+0x54>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <HAL_MspInit+0x54>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_MspInit+0x54>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_MspInit+0x54>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_MspInit+0x54>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	210f      	movs	r1, #15
 80015f2:	f06f 0001 	mvn.w	r0, #1
 80015f6:	f000 feb4 	bl	8002362 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a2f      	ldr	r2, [pc, #188]	; (80016e4 <HAL_ADC_MspInit+0xdc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d157      	bne.n	80016da <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <HAL_ADC_MspInit+0xe0>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a2d      	ldr	r2, [pc, #180]	; (80016e8 <HAL_ADC_MspInit+0xe0>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_ADC_MspInit+0xe0>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_ADC_MspInit+0xe0>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <HAL_ADC_MspInit+0xe0>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_ADC_MspInit+0xe0>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001662:	2304      	movs	r3, #4
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001666:	2303      	movs	r3, #3
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	481d      	ldr	r0, [pc, #116]	; (80016ec <HAL_ADC_MspInit+0xe4>)
 8001676:	f001 fa1b 	bl	8002ab0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800167a:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_ADC_MspInit+0xec>)
 800167e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 8001694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001698:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 800169c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 80016a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 80016ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016be:	480c      	ldr	r0, [pc, #48]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 80016c0:	f000 fe86 	bl	80023d0 <HAL_DMA_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80016ca:	f7ff ff6b 	bl	80015a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 80016d2:	639a      	str	r2, [r3, #56]	; 0x38
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_ADC_MspInit+0xe8>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40012000 	.word	0x40012000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	2000408c 	.word	0x2000408c
 80016f4:	40026410 	.word	0x40026410

080016f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a19      	ldr	r2, [pc, #100]	; (800177c <HAL_UART_MspInit+0x84>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d12c      	bne.n	8001774 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_UART_MspInit+0x88>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <HAL_UART_MspInit+0x88>)
 8001724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_UART_MspInit+0x88>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_UART_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a10      	ldr	r2, [pc, #64]	; (8001780 <HAL_UART_MspInit+0x88>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_UART_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001752:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001764:	2307      	movs	r3, #7
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <HAL_UART_MspInit+0x8c>)
 8001770:	f001 f99e 	bl	8002ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001774:	bf00      	nop
 8001776:	3728      	adds	r7, #40	; 0x28
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40004800 	.word	0x40004800
 8001780:	40023800 	.word	0x40023800
 8001784:	40020400 	.word	0x40020400

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b8:	f000 f8a2 	bl	8001900 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017bc:	f003 f928 	bl	8004a10 <xTaskGetSchedulerState>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d001      	beq.n	80017ca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017c6:	f003 fb67 	bl	8004e98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <DMA2_Stream0_IRQHandler+0x10>)
 80017d6:	f000 ff01 	bl	80025dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000408c 	.word	0x2000408c

080017e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001840 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800180e:	490e      	ldr	r1, [pc, #56]	; (8001848 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001824:	4c0b      	ldr	r4, [pc, #44]	; (8001854 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001832:	f7ff ffd7 	bl	80017e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001836:	f003 fd69 	bl	800530c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183a:	f7ff fb0d 	bl	8000e58 <main>
  bx  lr    
 800183e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800184c:	08005460 	.word	0x08005460
  ldr r2, =_sbss
 8001850:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001854:	200040f8 	.word	0x200040f8

08001858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_Init+0x40>)
 8001866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_Init+0x40>)
 8001872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_Init+0x40>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 fd61 	bl	800234c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188a:	200f      	movs	r0, #15
 800188c:	f000 f808 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff fe8e 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fd79 	bl	80023b6 <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 fd41 	bl	8002362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000024 	.word	0x20000024
 80018f8:	2000002c 	.word	0x2000002c
 80018fc:	20000028 	.word	0x20000028

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	2000002c 	.word	0x2000002c
 8001924:	200040f4 	.word	0x200040f4

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	200040f4 	.word	0x200040f4

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000002c 	.word	0x2000002c

08001988 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e033      	b.n	8001a06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fe2e 	bl	8001608 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ce:	f023 0302 	bic.w	r3, r3, #2
 80019d2:	f043 0202 	orr.w	r2, r3, #2
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fa68 	bl	8001eb0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f023 0303 	bic.w	r3, r3, #3
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
 80019f6:	e001      	b.n	80019fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_Start_DMA+0x1e>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e0e9      	b.n	8001c02 <HAL_ADC_Start_DMA+0x1f2>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d018      	beq.n	8001a76 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a54:	4b6d      	ldr	r3, [pc, #436]	; (8001c0c <HAL_ADC_Start_DMA+0x1fc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a6d      	ldr	r2, [pc, #436]	; (8001c10 <HAL_ADC_Start_DMA+0x200>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	0c9a      	lsrs	r2, r3, #18
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a68:	e002      	b.n	8001a70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f9      	bne.n	8001a6a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a84:	d107      	bne.n	8001a96 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a94:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	f040 80a1 	bne.w	8001be8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ad0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae4:	d106      	bne.n	8001af4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f023 0206 	bic.w	r2, r3, #6
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
 8001af2:	e002      	b.n	8001afa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b02:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <HAL_ADC_Start_DMA+0x204>)
 8001b04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	4a43      	ldr	r2, [pc, #268]	; (8001c18 <HAL_ADC_Start_DMA+0x208>)
 8001b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	4a42      	ldr	r2, [pc, #264]	; (8001c1c <HAL_ADC_Start_DMA+0x20c>)
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1a:	4a41      	ldr	r2, [pc, #260]	; (8001c20 <HAL_ADC_Start_DMA+0x210>)
 8001b1c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b36:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b46:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	334c      	adds	r3, #76	; 0x4c
 8001b52:	4619      	mov	r1, r3
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f000 fce8 	bl	800252c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d12a      	bne.n	8001bbe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a2d      	ldr	r2, [pc, #180]	; (8001c24 <HAL_ADC_Start_DMA+0x214>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d015      	beq.n	8001b9e <HAL_ADC_Start_DMA+0x18e>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a2c      	ldr	r2, [pc, #176]	; (8001c28 <HAL_ADC_Start_DMA+0x218>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d105      	bne.n	8001b88 <HAL_ADC_Start_DMA+0x178>
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <HAL_ADC_Start_DMA+0x204>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00a      	beq.n	8001b9e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <HAL_ADC_Start_DMA+0x21c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d136      	bne.n	8001c00 <HAL_ADC_Start_DMA+0x1f0>
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_ADC_Start_DMA+0x204>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d130      	bne.n	8001c00 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d129      	bne.n	8001c00 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	e020      	b.n	8001c00 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <HAL_ADC_Start_DMA+0x214>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d11b      	bne.n	8001c00 <HAL_ADC_Start_DMA+0x1f0>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d114      	bne.n	8001c00 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	e00b      	b.n	8001c00 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f043 0210 	orr.w	r2, r3, #16
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	f043 0201 	orr.w	r2, r3, #1
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000024 	.word	0x20000024
 8001c10:	431bde83 	.word	0x431bde83
 8001c14:	40012300 	.word	0x40012300
 8001c18:	080020a9 	.word	0x080020a9
 8001c1c:	08002163 	.word	0x08002163
 8001c20:	0800217f 	.word	0x0800217f
 8001c24:	40012000 	.word	0x40012000
 8001c28:	40012100 	.word	0x40012100
 8001c2c:	40012200 	.word	0x40012200

08001c30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x1c>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e105      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x228>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	d925      	bls.n	8001ce4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68d9      	ldr	r1, [r3, #12]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	3b1e      	subs	r3, #30
 8001cae:	2207      	movs	r2, #7
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	400a      	ands	r2, r1
 8001cbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68d9      	ldr	r1, [r3, #12]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4403      	add	r3, r0
 8001cd6:	3b1e      	subs	r3, #30
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	e022      	b.n	8001d2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6919      	ldr	r1, [r3, #16]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	400a      	ands	r2, r1
 8001d06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6919      	ldr	r1, [r3, #16]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4403      	add	r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d824      	bhi.n	8001d7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b05      	subs	r3, #5
 8001d44:	221f      	movs	r2, #31
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	400a      	ands	r2, r1
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b05      	subs	r3, #5
 8001d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34
 8001d7a:	e04c      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d824      	bhi.n	8001dce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	3b23      	subs	r3, #35	; 0x23
 8001d96:	221f      	movs	r2, #31
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	400a      	ands	r2, r1
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b23      	subs	r3, #35	; 0x23
 8001dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
 8001dcc:	e023      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b41      	subs	r3, #65	; 0x41
 8001de0:	221f      	movs	r2, #31
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	400a      	ands	r2, r1
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	3b41      	subs	r3, #65	; 0x41
 8001e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_ADC_ConfigChannel+0x234>)
 8001e18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <HAL_ADC_ConfigChannel+0x238>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d109      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1cc>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b12      	cmp	r3, #18
 8001e2a:	d105      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_ADC_ConfigChannel+0x238>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d123      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x21e>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d003      	beq.n	8001e52 <HAL_ADC_ConfigChannel+0x1e6>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b11      	cmp	r3, #17
 8001e50:	d11b      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d111      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_ADC_ConfigChannel+0x23c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_ADC_ConfigChannel+0x240>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	0c9a      	lsrs	r2, r3, #18
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e7c:	e002      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f9      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	40012300 	.word	0x40012300
 8001ea4:	40012000 	.word	0x40012000
 8001ea8:	20000024 	.word	0x20000024
 8001eac:	431bde83 	.word	0x431bde83

08001eb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb8:	4b79      	ldr	r3, [pc, #484]	; (80020a0 <ADC_Init+0x1f0>)
 8001eba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	021a      	lsls	r2, r3, #8
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6899      	ldr	r1, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	4a58      	ldr	r2, [pc, #352]	; (80020a4 <ADC_Init+0x1f4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d022      	beq.n	8001f8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6899      	ldr	r1, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	e00f      	b.n	8001fae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0202 	bic.w	r2, r2, #2
 8001fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6899      	ldr	r1, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7e1b      	ldrb	r3, [r3, #24]
 8001fc8:	005a      	lsls	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01b      	beq.n	8002014 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ffa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	3b01      	subs	r3, #1
 8002008:	035a      	lsls	r2, r3, #13
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	e007      	b.n	8002024 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002022:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	3b01      	subs	r3, #1
 8002040:	051a      	lsls	r2, r3, #20
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6899      	ldr	r1, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002066:	025a      	lsls	r2, r3, #9
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800207e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6899      	ldr	r1, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	029a      	lsls	r2, r3, #10
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	609a      	str	r2, [r3, #8]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40012300 	.word	0x40012300
 80020a4:	0f000001 	.word	0x0f000001

080020a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d13c      	bne.n	800213c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d12b      	bne.n	8002134 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d127      	bne.n	8002134 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d119      	bne.n	8002134 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0220 	bic.w	r2, r2, #32
 800210e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff fd7b 	bl	8001c30 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800213a:	e00e      	b.n	800215a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff fd85 	bl	8001c58 <HAL_ADC_ErrorCallback>
}
 800214e:	e004      	b.n	800215a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f7ff fd67 	bl	8001c44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2240      	movs	r2, #64	; 0x40
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f043 0204 	orr.w	r2, r3, #4
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff fd5a 	bl	8001c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <__NVIC_GetPriorityGrouping+0x18>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 0307 	and.w	r3, r3, #7
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db0b      	blt.n	800223a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	4907      	ldr	r1, [pc, #28]	; (8002248 <__NVIC_EnableIRQ+0x38>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2001      	movs	r0, #1
 8002232:	fa00 f202 	lsl.w	r2, r0, r2
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db0a      	blt.n	8002276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	490c      	ldr	r1, [pc, #48]	; (8002298 <__NVIC_SetPriority+0x4c>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	0112      	lsls	r2, r2, #4
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002274:	e00a      	b.n	800228c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <__NVIC_SetPriority+0x50>)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3b04      	subs	r3, #4
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	440b      	add	r3, r1
 800228a:	761a      	strb	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f1c3 0307 	rsb	r3, r3, #7
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	bf28      	it	cs
 80022be:	2304      	movcs	r3, #4
 80022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <NVIC_EncodePriority+0x30>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3b03      	subs	r3, #3
 80022ce:	e000      	b.n	80022d2 <NVIC_EncodePriority+0x32>
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	4313      	orrs	r3, r2
         );
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002318:	d301      	bcc.n	800231e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <SysTick_Config+0x40>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002326:	210f      	movs	r1, #15
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f7ff ff8e 	bl	800224c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <SysTick_Config+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SysTick_Config+0x40>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff29 	bl	80021ac <__NVIC_SetPriorityGrouping>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002374:	f7ff ff3e 	bl	80021f4 <__NVIC_GetPriorityGrouping>
 8002378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7ff ff8e 	bl	80022a0 <NVIC_EncodePriority>
 8002384:	4602      	mov	r2, r0
 8002386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff5d 	bl	800224c <__NVIC_SetPriority>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff31 	bl	8002210 <__NVIC_EnableIRQ>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffa2 	bl	8002308 <SysTick_Config>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff faa4 	bl	8001928 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e099      	b.n	8002520 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240c:	e00f      	b.n	800242e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800240e:	f7ff fa8b 	bl	8001928 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b05      	cmp	r3, #5
 800241a:	d908      	bls.n	800242e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2203      	movs	r2, #3
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e078      	b.n	8002520 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e8      	bne.n	800240e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4b38      	ldr	r3, [pc, #224]	; (8002528 <HAL_DMA_Init+0x158>)
 8002448:	4013      	ands	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800245a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2b04      	cmp	r3, #4
 8002486:	d107      	bne.n	8002498 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4313      	orrs	r3, r2
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f023 0307 	bic.w	r3, r3, #7
 80024ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d117      	bne.n	80024f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00e      	beq.n	80024f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fa6f 	bl	80029b8 <DMA_CheckFifoParam>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2240      	movs	r2, #64	; 0x40
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024ee:	2301      	movs	r3, #1
 80024f0:	e016      	b.n	8002520 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa26 	bl	800294c <DMA_CalcBaseAndBitshift>
 8002500:	4603      	mov	r3, r0
 8002502:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	223f      	movs	r2, #63	; 0x3f
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	f010803f 	.word	0xf010803f

0800252c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_DMA_Start_IT+0x26>
 800254e:	2302      	movs	r3, #2
 8002550:	e040      	b.n	80025d4 <HAL_DMA_Start_IT+0xa8>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d12f      	bne.n	80025c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2202      	movs	r2, #2
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f9b8 	bl	80028f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	223f      	movs	r2, #63	; 0x3f
 8002586:	409a      	lsls	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0216 	orr.w	r2, r2, #22
 800259a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0208 	orr.w	r2, r2, #8
 80025b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e005      	b.n	80025d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
 80025d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025e8:	4b92      	ldr	r3, [pc, #584]	; (8002834 <HAL_DMA_IRQHandler+0x258>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a92      	ldr	r2, [pc, #584]	; (8002838 <HAL_DMA_IRQHandler+0x25c>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0a9b      	lsrs	r3, r3, #10
 80025f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	2208      	movs	r2, #8
 8002608:	409a      	lsls	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01a      	beq.n	8002648 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0204 	bic.w	r2, r2, #4
 800262e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	2208      	movs	r2, #8
 8002636:	409a      	lsls	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	f043 0201 	orr.w	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	2201      	movs	r2, #1
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d012      	beq.n	800267e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	2201      	movs	r2, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	f043 0202 	orr.w	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	2204      	movs	r2, #4
 8002684:	409a      	lsls	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d012      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00b      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	2204      	movs	r2, #4
 80026a2:	409a      	lsls	r2, r3
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ac:	f043 0204 	orr.w	r2, r3, #4
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b8:	2210      	movs	r2, #16
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d043      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d03c      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	2210      	movs	r2, #16
 80026d8:	409a      	lsls	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d018      	beq.n	800271e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d108      	bne.n	800270c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d024      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
 800270a:	e01f      	b.n	800274c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01b      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
 800271c:	e016      	b.n	800274c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0208 	bic.w	r2, r2, #8
 800273a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	2220      	movs	r2, #32
 8002752:	409a      	lsls	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 808e 	beq.w	800287a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8086 	beq.w	800287a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	2220      	movs	r2, #32
 8002774:	409a      	lsls	r2, r3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b05      	cmp	r3, #5
 8002784:	d136      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0216 	bic.w	r2, r2, #22
 8002794:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d103      	bne.n	80027b6 <HAL_DMA_IRQHandler+0x1da>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0208 	bic.w	r2, r2, #8
 80027c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	223f      	movs	r2, #63	; 0x3f
 80027cc:	409a      	lsls	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d07d      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
        }
        return;
 80027f2:	e078      	b.n	80028e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01c      	beq.n	800283c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d108      	bne.n	8002822 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	2b00      	cmp	r3, #0
 8002816:	d030      	beq.n	800287a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
 8002820:	e02b      	b.n	800287a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	2b00      	cmp	r3, #0
 8002828:	d027      	beq.n	800287a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	4798      	blx	r3
 8002832:	e022      	b.n	800287a <HAL_DMA_IRQHandler+0x29e>
 8002834:	20000024 	.word	0x20000024
 8002838:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0210 	bic.w	r2, r2, #16
 8002858:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287e:	2b00      	cmp	r3, #0
 8002880:	d032      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d022      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2205      	movs	r2, #5
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	3301      	adds	r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d307      	bcc.n	80028c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f2      	bne.n	80028a6 <HAL_DMA_IRQHandler+0x2ca>
 80028c0:	e000      	b.n	80028c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
 80028e4:	e000      	b.n	80028e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028e6:	bf00      	nop
    }
  }
}
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop

080028f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800290c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d108      	bne.n	8002930 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800292e:	e007      	b.n	8002940 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	60da      	str	r2, [r3, #12]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	3b10      	subs	r3, #16
 800295c:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <DMA_CalcBaseAndBitshift+0x64>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002966:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b03      	cmp	r3, #3
 8002978:	d909      	bls.n	800298e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002982:	f023 0303 	bic.w	r3, r3, #3
 8002986:	1d1a      	adds	r2, r3, #4
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	659a      	str	r2, [r3, #88]	; 0x58
 800298c:	e007      	b.n	800299e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	aaaaaaab 	.word	0xaaaaaaab
 80029b4:	08005448 	.word	0x08005448

080029b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11f      	bne.n	8002a12 <DMA_CheckFifoParam+0x5a>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d856      	bhi.n	8002a86 <DMA_CheckFifoParam+0xce>
 80029d8:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <DMA_CheckFifoParam+0x28>)
 80029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029de:	bf00      	nop
 80029e0:	080029f1 	.word	0x080029f1
 80029e4:	08002a03 	.word	0x08002a03
 80029e8:	080029f1 	.word	0x080029f1
 80029ec:	08002a87 	.word	0x08002a87
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d046      	beq.n	8002a8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a00:	e043      	b.n	8002a8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a0a:	d140      	bne.n	8002a8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a10:	e03d      	b.n	8002a8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a1a:	d121      	bne.n	8002a60 <DMA_CheckFifoParam+0xa8>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d837      	bhi.n	8002a92 <DMA_CheckFifoParam+0xda>
 8002a22:	a201      	add	r2, pc, #4	; (adr r2, 8002a28 <DMA_CheckFifoParam+0x70>)
 8002a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a3f 	.word	0x08002a3f
 8002a30:	08002a39 	.word	0x08002a39
 8002a34:	08002a51 	.word	0x08002a51
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3c:	e030      	b.n	8002aa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d025      	beq.n	8002a96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a4e:	e022      	b.n	8002a96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a58:	d11f      	bne.n	8002a9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a5e:	e01c      	b.n	8002a9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d903      	bls.n	8002a6e <DMA_CheckFifoParam+0xb6>
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d003      	beq.n	8002a74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a6c:	e018      	b.n	8002aa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
      break;
 8002a72:	e015      	b.n	8002aa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00e      	beq.n	8002a9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e00b      	b.n	8002a9e <DMA_CheckFifoParam+0xe6>
      break;
 8002a86:	bf00      	nop
 8002a88:	e00a      	b.n	8002aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e008      	b.n	8002aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e006      	b.n	8002aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8002a92:	bf00      	nop
 8002a94:	e004      	b.n	8002aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8002a96:	bf00      	nop
 8002a98:	e002      	b.n	8002aa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a9a:	bf00      	nop
 8002a9c:	e000      	b.n	8002aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8002a9e:	bf00      	nop
    }
  } 
  
  return status; 
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e16b      	b.n	8002da4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002acc:	2201      	movs	r2, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	f040 815a 	bne.w	8002d9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d005      	beq.n	8002b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d130      	bne.n	8002b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b38:	2201      	movs	r2, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 0201 	and.w	r2, r3, #1
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d017      	beq.n	8002ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d123      	bne.n	8002bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	08da      	lsrs	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3208      	adds	r2, #8
 8002bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	08da      	lsrs	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3208      	adds	r2, #8
 8002bee:	69b9      	ldr	r1, [r7, #24]
 8002bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0203 	and.w	r2, r3, #3
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80b4 	beq.w	8002d9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	4b60      	ldr	r3, [pc, #384]	; (8002dbc <HAL_GPIO_Init+0x30c>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	4a5f      	ldr	r2, [pc, #380]	; (8002dbc <HAL_GPIO_Init+0x30c>)
 8002c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c44:	6453      	str	r3, [r2, #68]	; 0x44
 8002c46:	4b5d      	ldr	r3, [pc, #372]	; (8002dbc <HAL_GPIO_Init+0x30c>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c52:	4a5b      	ldr	r2, [pc, #364]	; (8002dc0 <HAL_GPIO_Init+0x310>)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	3302      	adds	r3, #2
 8002c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	220f      	movs	r2, #15
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <HAL_GPIO_Init+0x314>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d02b      	beq.n	8002cd6 <HAL_GPIO_Init+0x226>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a51      	ldr	r2, [pc, #324]	; (8002dc8 <HAL_GPIO_Init+0x318>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d025      	beq.n	8002cd2 <HAL_GPIO_Init+0x222>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a50      	ldr	r2, [pc, #320]	; (8002dcc <HAL_GPIO_Init+0x31c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01f      	beq.n	8002cce <HAL_GPIO_Init+0x21e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4f      	ldr	r2, [pc, #316]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d019      	beq.n	8002cca <HAL_GPIO_Init+0x21a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4e      	ldr	r2, [pc, #312]	; (8002dd4 <HAL_GPIO_Init+0x324>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_GPIO_Init+0x216>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4d      	ldr	r2, [pc, #308]	; (8002dd8 <HAL_GPIO_Init+0x328>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_GPIO_Init+0x212>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	; (8002ddc <HAL_GPIO_Init+0x32c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_GPIO_Init+0x20e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4b      	ldr	r2, [pc, #300]	; (8002de0 <HAL_GPIO_Init+0x330>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_GPIO_Init+0x20a>
 8002cb6:	2307      	movs	r3, #7
 8002cb8:	e00e      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cba:	2308      	movs	r3, #8
 8002cbc:	e00c      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	e00a      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cc2:	2305      	movs	r3, #5
 8002cc4:	e008      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	e006      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e004      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e002      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	f002 0203 	and.w	r2, r2, #3
 8002cde:	0092      	lsls	r2, r2, #2
 8002ce0:	4093      	lsls	r3, r2
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce8:	4935      	ldr	r1, [pc, #212]	; (8002dc0 <HAL_GPIO_Init+0x310>)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	089b      	lsrs	r3, r3, #2
 8002cee:	3302      	adds	r3, #2
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf6:	4b3b      	ldr	r3, [pc, #236]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d1a:	4a32      	ldr	r2, [pc, #200]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d44:	4a27      	ldr	r2, [pc, #156]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d4a:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d6e:	4a1d      	ldr	r2, [pc, #116]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d98:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3301      	adds	r3, #1
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b0f      	cmp	r3, #15
 8002da8:	f67f ae90 	bls.w	8002acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40013800 	.word	0x40013800
 8002dc4:	40020000 	.word	0x40020000
 8002dc8:	40020400 	.word	0x40020400
 8002dcc:	40020800 	.word	0x40020800
 8002dd0:	40020c00 	.word	0x40020c00
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40021400 	.word	0x40021400
 8002ddc:	40021800 	.word	0x40021800
 8002de0:	40021c00 	.word	0x40021c00
 8002de4:	40013c00 	.word	0x40013c00

08002de8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	887b      	ldrh	r3, [r7, #2]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	e001      	b.n	8002e0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
 8002e24:	4613      	mov	r3, r2
 8002e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e28:	787b      	ldrb	r3, [r7, #1]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e34:	e003      	b.n	8002e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e36:	887b      	ldrh	r3, [r7, #2]
 8002e38:	041a      	lsls	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	619a      	str	r2, [r3, #24]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e264      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d075      	beq.n	8002f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6a:	4ba3      	ldr	r3, [pc, #652]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d00c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e76:	4ba0      	ldr	r3, [pc, #640]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d112      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e82:	4b9d      	ldr	r3, [pc, #628]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	4b99      	ldr	r3, [pc, #612]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d05b      	beq.n	8002f54 <HAL_RCC_OscConfig+0x108>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d157      	bne.n	8002f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e23f      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x74>
 8002eb2:	4b91      	ldr	r3, [pc, #580]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a90      	ldr	r2, [pc, #576]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e01d      	b.n	8002efc <HAL_RCC_OscConfig+0xb0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x98>
 8002eca:	4b8b      	ldr	r3, [pc, #556]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a8a      	ldr	r2, [pc, #552]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b88      	ldr	r3, [pc, #544]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a87      	ldr	r2, [pc, #540]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0xb0>
 8002ee4:	4b84      	ldr	r3, [pc, #528]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a83      	ldr	r2, [pc, #524]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b81      	ldr	r3, [pc, #516]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a80      	ldr	r2, [pc, #512]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fd10 	bl	8001928 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fd0c 	bl	8001928 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e204      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b76      	ldr	r3, [pc, #472]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0xc0>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fcfc 	bl	8001928 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fe fcf8 	bl	8001928 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e1f0      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f46:	4b6c      	ldr	r3, [pc, #432]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0xe8>
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d063      	beq.n	800302a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f62:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6e:	4b62      	ldr	r3, [pc, #392]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d11c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7a:	4b5f      	ldr	r3, [pc, #380]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d116      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	4b5c      	ldr	r3, [pc, #368]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x152>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d001      	beq.n	8002f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e1c4      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9e:	4b56      	ldr	r3, [pc, #344]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4952      	ldr	r1, [pc, #328]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb2:	e03a      	b.n	800302a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fbc:	4b4f      	ldr	r3, [pc, #316]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fcb1 	bl	8001928 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fe fcad 	bl	8001928 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e1a5      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	4b46      	ldr	r3, [pc, #280]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4940      	ldr	r1, [pc, #256]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]
 8002ffc:	e015      	b.n	800302a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffe:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <HAL_RCC_OscConfig+0x2b0>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe fc90 	bl	8001928 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800300c:	f7fe fc8c 	bl	8001928 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e184      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d030      	beq.n	8003098 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d016      	beq.n	800306c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303e:	4b30      	ldr	r3, [pc, #192]	; (8003100 <HAL_RCC_OscConfig+0x2b4>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fe fc70 	bl	8001928 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304c:	f7fe fc6c 	bl	8001928 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e164      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x200>
 800306a:	e015      	b.n	8003098 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800306c:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_RCC_OscConfig+0x2b4>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003072:	f7fe fc59 	bl	8001928 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307a:	f7fe fc55 	bl	8001928 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e14d      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308c:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a0 	beq.w	80031e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d2:	2301      	movs	r3, #1
 80030d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_OscConfig+0x2b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d121      	bne.n	8003126 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e2:	4b08      	ldr	r3, [pc, #32]	; (8003104 <HAL_RCC_OscConfig+0x2b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a07      	ldr	r2, [pc, #28]	; (8003104 <HAL_RCC_OscConfig+0x2b8>)
 80030e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fc1b 	bl	8001928 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	e011      	b.n	800311a <HAL_RCC_OscConfig+0x2ce>
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	42470000 	.word	0x42470000
 8003100:	42470e80 	.word	0x42470e80
 8003104:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003108:	f7fe fc0e 	bl	8001928 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e106      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311a:	4b85      	ldr	r3, [pc, #532]	; (8003330 <HAL_RCC_OscConfig+0x4e4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d106      	bne.n	800313c <HAL_RCC_OscConfig+0x2f0>
 800312e:	4b81      	ldr	r3, [pc, #516]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a80      	ldr	r2, [pc, #512]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
 800313a:	e01c      	b.n	8003176 <HAL_RCC_OscConfig+0x32a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b05      	cmp	r3, #5
 8003142:	d10c      	bne.n	800315e <HAL_RCC_OscConfig+0x312>
 8003144:	4b7b      	ldr	r3, [pc, #492]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	4a7a      	ldr	r2, [pc, #488]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 800314a:	f043 0304 	orr.w	r3, r3, #4
 800314e:	6713      	str	r3, [r2, #112]	; 0x70
 8003150:	4b78      	ldr	r3, [pc, #480]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	4a77      	ldr	r2, [pc, #476]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6713      	str	r3, [r2, #112]	; 0x70
 800315c:	e00b      	b.n	8003176 <HAL_RCC_OscConfig+0x32a>
 800315e:	4b75      	ldr	r3, [pc, #468]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	4a74      	ldr	r2, [pc, #464]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6713      	str	r3, [r2, #112]	; 0x70
 800316a:	4b72      	ldr	r3, [pc, #456]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	4a71      	ldr	r2, [pc, #452]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d015      	beq.n	80031aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe fbd3 	bl	8001928 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fe fbcf 	bl	8001928 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0c5      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319c:	4b65      	ldr	r3, [pc, #404]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ee      	beq.n	8003186 <HAL_RCC_OscConfig+0x33a>
 80031a8:	e014      	b.n	80031d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031aa:	f7fe fbbd 	bl	8001928 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe fbb9 	bl	8001928 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0af      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c8:	4b5a      	ldr	r3, [pc, #360]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ee      	bne.n	80031b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d105      	bne.n	80031e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031da:	4b56      	ldr	r3, [pc, #344]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	4a55      	ldr	r2, [pc, #340]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 80031e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 809b 	beq.w	8003326 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f0:	4b50      	ldr	r3, [pc, #320]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d05c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d141      	bne.n	8003288 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003204:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fe fb8d 	bl	8001928 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003212:	f7fe fb89 	bl	8001928 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e081      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003224:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	019b      	lsls	r3, r3, #6
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	3b01      	subs	r3, #1
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	061b      	lsls	r3, r3, #24
 8003254:	4937      	ldr	r1, [pc, #220]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fb62 	bl	8001928 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fb5e 	bl	8001928 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e056      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x41c>
 8003286:	e04e      	b.n	8003326 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003288:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328e:	f7fe fb4b 	bl	8001928 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003296:	f7fe fb47 	bl	8001928 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e03f      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a8:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f0      	bne.n	8003296 <HAL_RCC_OscConfig+0x44a>
 80032b4:	e037      	b.n	8003326 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e032      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d028      	beq.n	8003322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d121      	bne.n	8003322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d11a      	bne.n	8003322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d111      	bne.n	8003322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d107      	bne.n	8003322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d001      	beq.n	8003326 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40007000 	.word	0x40007000
 8003334:	40023800 	.word	0x40023800
 8003338:	42470060 	.word	0x42470060

0800333c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0cc      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003350:	4b68      	ldr	r3, [pc, #416]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d90c      	bls.n	8003378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b63      	ldr	r3, [pc, #396]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0b8      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003390:	4b59      	ldr	r3, [pc, #356]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a58      	ldr	r2, [pc, #352]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800339a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a8:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4a52      	ldr	r2, [pc, #328]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b4:	4b50      	ldr	r3, [pc, #320]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	494d      	ldr	r1, [pc, #308]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d044      	beq.n	800345c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d107      	bne.n	80033ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d119      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e07f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e06f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e067      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341a:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4934      	ldr	r1, [pc, #208]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800342c:	f7fe fa7c 	bl	8001928 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	e00a      	b.n	800344a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fe fa78 	bl	8001928 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e04f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 020c 	and.w	r2, r3, #12
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	429a      	cmp	r2, r3
 800345a:	d1eb      	bne.n	8003434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d20c      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e032      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4916      	ldr	r1, [pc, #88]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	490e      	ldr	r1, [pc, #56]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034c2:	f000 f821 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	490a      	ldr	r1, [pc, #40]	; (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	5ccb      	ldrb	r3, [r1, r3]
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	4a09      	ldr	r2, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1c8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe f9dc 	bl	80018a0 <HAL_InitTick>

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023c00 	.word	0x40023c00
 80034f8:	40023800 	.word	0x40023800
 80034fc:	08005430 	.word	0x08005430
 8003500:	20000024 	.word	0x20000024
 8003504:	20000028 	.word	0x20000028

08003508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003508:	b5b0      	push	{r4, r5, r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800350e:	2100      	movs	r1, #0
 8003510:	6079      	str	r1, [r7, #4]
 8003512:	2100      	movs	r1, #0
 8003514:	60f9      	str	r1, [r7, #12]
 8003516:	2100      	movs	r1, #0
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800351a:	2100      	movs	r1, #0
 800351c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800351e:	4952      	ldr	r1, [pc, #328]	; (8003668 <HAL_RCC_GetSysClockFreq+0x160>)
 8003520:	6889      	ldr	r1, [r1, #8]
 8003522:	f001 010c 	and.w	r1, r1, #12
 8003526:	2908      	cmp	r1, #8
 8003528:	d00d      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0x3e>
 800352a:	2908      	cmp	r1, #8
 800352c:	f200 8094 	bhi.w	8003658 <HAL_RCC_GetSysClockFreq+0x150>
 8003530:	2900      	cmp	r1, #0
 8003532:	d002      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x32>
 8003534:	2904      	cmp	r1, #4
 8003536:	d003      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x38>
 8003538:	e08e      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800353a:	4b4c      	ldr	r3, [pc, #304]	; (800366c <HAL_RCC_GetSysClockFreq+0x164>)
 800353c:	60bb      	str	r3, [r7, #8]
       break;
 800353e:	e08e      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003540:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <HAL_RCC_GetSysClockFreq+0x168>)
 8003542:	60bb      	str	r3, [r7, #8]
      break;
 8003544:	e08b      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003546:	4948      	ldr	r1, [pc, #288]	; (8003668 <HAL_RCC_GetSysClockFreq+0x160>)
 8003548:	6849      	ldr	r1, [r1, #4]
 800354a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800354e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003550:	4945      	ldr	r1, [pc, #276]	; (8003668 <HAL_RCC_GetSysClockFreq+0x160>)
 8003552:	6849      	ldr	r1, [r1, #4]
 8003554:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003558:	2900      	cmp	r1, #0
 800355a:	d024      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355c:	4942      	ldr	r1, [pc, #264]	; (8003668 <HAL_RCC_GetSysClockFreq+0x160>)
 800355e:	6849      	ldr	r1, [r1, #4]
 8003560:	0989      	lsrs	r1, r1, #6
 8003562:	4608      	mov	r0, r1
 8003564:	f04f 0100 	mov.w	r1, #0
 8003568:	f240 14ff 	movw	r4, #511	; 0x1ff
 800356c:	f04f 0500 	mov.w	r5, #0
 8003570:	ea00 0204 	and.w	r2, r0, r4
 8003574:	ea01 0305 	and.w	r3, r1, r5
 8003578:	493d      	ldr	r1, [pc, #244]	; (8003670 <HAL_RCC_GetSysClockFreq+0x168>)
 800357a:	fb01 f003 	mul.w	r0, r1, r3
 800357e:	2100      	movs	r1, #0
 8003580:	fb01 f102 	mul.w	r1, r1, r2
 8003584:	1844      	adds	r4, r0, r1
 8003586:	493a      	ldr	r1, [pc, #232]	; (8003670 <HAL_RCC_GetSysClockFreq+0x168>)
 8003588:	fba2 0101 	umull	r0, r1, r2, r1
 800358c:	1863      	adds	r3, r4, r1
 800358e:	4619      	mov	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	461a      	mov	r2, r3
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	f7fd fac8 	bl	8000b2c <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4613      	mov	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e04a      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a6:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_RCC_GetSysClockFreq+0x160>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	099b      	lsrs	r3, r3, #6
 80035ac:	461a      	mov	r2, r3
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035b6:	f04f 0100 	mov.w	r1, #0
 80035ba:	ea02 0400 	and.w	r4, r2, r0
 80035be:	ea03 0501 	and.w	r5, r3, r1
 80035c2:	4620      	mov	r0, r4
 80035c4:	4629      	mov	r1, r5
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	014b      	lsls	r3, r1, #5
 80035d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035d4:	0142      	lsls	r2, r0, #5
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	1b00      	subs	r0, r0, r4
 80035dc:	eb61 0105 	sbc.w	r1, r1, r5
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	018b      	lsls	r3, r1, #6
 80035ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035ee:	0182      	lsls	r2, r0, #6
 80035f0:	1a12      	subs	r2, r2, r0
 80035f2:	eb63 0301 	sbc.w	r3, r3, r1
 80035f6:	f04f 0000 	mov.w	r0, #0
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	00d9      	lsls	r1, r3, #3
 8003600:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003604:	00d0      	lsls	r0, r2, #3
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	1912      	adds	r2, r2, r4
 800360c:	eb45 0303 	adc.w	r3, r5, r3
 8003610:	f04f 0000 	mov.w	r0, #0
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	0299      	lsls	r1, r3, #10
 800361a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800361e:	0290      	lsls	r0, r2, #10
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	461a      	mov	r2, r3
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	f7fd fa7c 	bl	8000b2c <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4613      	mov	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_RCC_GetSysClockFreq+0x160>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	3301      	adds	r3, #1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	60bb      	str	r3, [r7, #8]
      break;
 8003656:	e002      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <HAL_RCC_GetSysClockFreq+0x164>)
 800365a:	60bb      	str	r3, [r7, #8]
      break;
 800365c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365e:	68bb      	ldr	r3, [r7, #8]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bdb0      	pop	{r4, r5, r7, pc}
 8003668:	40023800 	.word	0x40023800
 800366c:	00f42400 	.word	0x00f42400
 8003670:	017d7840 	.word	0x017d7840

08003674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_RCC_GetHCLKFreq+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000024 	.word	0x20000024

0800368c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003690:	f7ff fff0 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	0a9b      	lsrs	r3, r3, #10
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4903      	ldr	r1, [pc, #12]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40023800 	.word	0x40023800
 80036b0:	08005440 	.word	0x08005440

080036b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036b8:	f7ff ffdc 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	0b5b      	lsrs	r3, r3, #13
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	08005440 	.word	0x08005440

080036dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e03f      	b.n	800376e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd fff8 	bl	80016f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800371e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f905 	bl	8003930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b08a      	sub	sp, #40	; 0x28
 800377a:	af02      	add	r7, sp, #8
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	d17c      	bne.n	8003890 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_UART_Transmit+0x2c>
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e075      	b.n	8003892 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_UART_Transmit+0x3e>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e06e      	b.n	8003892 <HAL_UART_Transmit+0x11c>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2221      	movs	r2, #33	; 0x21
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ca:	f7fe f8ad 	bl	8001928 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	88fa      	ldrh	r2, [r7, #6]
 80037d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	88fa      	ldrh	r2, [r7, #6]
 80037da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e4:	d108      	bne.n	80037f8 <HAL_UART_Transmit+0x82>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	e003      	b.n	8003800 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003808:	e02a      	b.n	8003860 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	2180      	movs	r1, #128	; 0x80
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f840 	bl	800389a <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e036      	b.n	8003892 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003838:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	3302      	adds	r3, #2
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	e007      	b.n	8003852 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	3301      	adds	r3, #1
 8003850:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1cf      	bne.n	800380a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	2140      	movs	r1, #64	; 0x40
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f810 	bl	800389a <UART_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e006      	b.n	8003892 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038aa:	e02c      	b.n	8003906 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b2:	d028      	beq.n	8003906 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0x30>
 80038ba:	f7fe f835 	bl	8001928 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d21d      	bcs.n	8003906 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038d8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e00f      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	429a      	cmp	r2, r3
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	429a      	cmp	r2, r3
 8003922:	d0c3      	beq.n	80038ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003934:	b09f      	sub	sp, #124	; 0x7c
 8003936:	af00      	add	r7, sp, #0
 8003938:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800393a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003946:	68d9      	ldr	r1, [r3, #12]
 8003948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	ea40 0301 	orr.w	r3, r0, r1
 8003950:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	431a      	orrs	r2, r3
 800395c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	431a      	orrs	r2, r3
 8003962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	4313      	orrs	r3, r2
 8003968:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800396a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003974:	f021 010c 	bic.w	r1, r1, #12
 8003978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800397e:	430b      	orrs	r3, r1
 8003980:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800398c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398e:	6999      	ldr	r1, [r3, #24]
 8003990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	ea40 0301 	orr.w	r3, r0, r1
 8003998:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4bc5      	ldr	r3, [pc, #788]	; (8003cb4 <UART_SetConfig+0x384>)
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d004      	beq.n	80039ae <UART_SetConfig+0x7e>
 80039a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4bc3      	ldr	r3, [pc, #780]	; (8003cb8 <UART_SetConfig+0x388>)
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d103      	bne.n	80039b6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039ae:	f7ff fe81 	bl	80036b4 <HAL_RCC_GetPCLK2Freq>
 80039b2:	6778      	str	r0, [r7, #116]	; 0x74
 80039b4:	e002      	b.n	80039bc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039b6:	f7ff fe69 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 80039ba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c4:	f040 80b6 	bne.w	8003b34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ca:	461c      	mov	r4, r3
 80039cc:	f04f 0500 	mov.w	r5, #0
 80039d0:	4622      	mov	r2, r4
 80039d2:	462b      	mov	r3, r5
 80039d4:	1891      	adds	r1, r2, r2
 80039d6:	6439      	str	r1, [r7, #64]	; 0x40
 80039d8:	415b      	adcs	r3, r3
 80039da:	647b      	str	r3, [r7, #68]	; 0x44
 80039dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039e0:	1912      	adds	r2, r2, r4
 80039e2:	eb45 0303 	adc.w	r3, r5, r3
 80039e6:	f04f 0000 	mov.w	r0, #0
 80039ea:	f04f 0100 	mov.w	r1, #0
 80039ee:	00d9      	lsls	r1, r3, #3
 80039f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039f4:	00d0      	lsls	r0, r2, #3
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	1911      	adds	r1, r2, r4
 80039fc:	6639      	str	r1, [r7, #96]	; 0x60
 80039fe:	416b      	adcs	r3, r5
 8003a00:	667b      	str	r3, [r7, #100]	; 0x64
 8003a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	1891      	adds	r1, r2, r2
 8003a0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a10:	415b      	adcs	r3, r3
 8003a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a1c:	f7fd f886 	bl	8000b2c <__aeabi_uldivmod>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4ba5      	ldr	r3, [pc, #660]	; (8003cbc <UART_SetConfig+0x38c>)
 8003a26:	fba3 2302 	umull	r2, r3, r3, r2
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	011e      	lsls	r6, r3, #4
 8003a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a30:	461c      	mov	r4, r3
 8003a32:	f04f 0500 	mov.w	r5, #0
 8003a36:	4622      	mov	r2, r4
 8003a38:	462b      	mov	r3, r5
 8003a3a:	1891      	adds	r1, r2, r2
 8003a3c:	6339      	str	r1, [r7, #48]	; 0x30
 8003a3e:	415b      	adcs	r3, r3
 8003a40:	637b      	str	r3, [r7, #52]	; 0x34
 8003a42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a46:	1912      	adds	r2, r2, r4
 8003a48:	eb45 0303 	adc.w	r3, r5, r3
 8003a4c:	f04f 0000 	mov.w	r0, #0
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	00d9      	lsls	r1, r3, #3
 8003a56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a5a:	00d0      	lsls	r0, r2, #3
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	1911      	adds	r1, r2, r4
 8003a62:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a64:	416b      	adcs	r3, r5
 8003a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	1891      	adds	r1, r2, r2
 8003a74:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a76:	415b      	adcs	r3, r3
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a82:	f7fd f853 	bl	8000b2c <__aeabi_uldivmod>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4b8c      	ldr	r3, [pc, #560]	; (8003cbc <UART_SetConfig+0x38c>)
 8003a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	2164      	movs	r1, #100	; 0x64
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	3332      	adds	r3, #50	; 0x32
 8003a9e:	4a87      	ldr	r2, [pc, #540]	; (8003cbc <UART_SetConfig+0x38c>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003aac:	441e      	add	r6, r3
 8003aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f04f 0100 	mov.w	r1, #0
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	1894      	adds	r4, r2, r2
 8003abc:	623c      	str	r4, [r7, #32]
 8003abe:	415b      	adcs	r3, r3
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ac6:	1812      	adds	r2, r2, r0
 8003ac8:	eb41 0303 	adc.w	r3, r1, r3
 8003acc:	f04f 0400 	mov.w	r4, #0
 8003ad0:	f04f 0500 	mov.w	r5, #0
 8003ad4:	00dd      	lsls	r5, r3, #3
 8003ad6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ada:	00d4      	lsls	r4, r2, #3
 8003adc:	4622      	mov	r2, r4
 8003ade:	462b      	mov	r3, r5
 8003ae0:	1814      	adds	r4, r2, r0
 8003ae2:	653c      	str	r4, [r7, #80]	; 0x50
 8003ae4:	414b      	adcs	r3, r1
 8003ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	461a      	mov	r2, r3
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	1891      	adds	r1, r2, r2
 8003af4:	61b9      	str	r1, [r7, #24]
 8003af6:	415b      	adcs	r3, r3
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003afe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b02:	f7fd f813 	bl	8000b2c <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4b6c      	ldr	r3, [pc, #432]	; (8003cbc <UART_SetConfig+0x38c>)
 8003b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	2164      	movs	r1, #100	; 0x64
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	3332      	adds	r3, #50	; 0x32
 8003b1e:	4a67      	ldr	r2, [pc, #412]	; (8003cbc <UART_SetConfig+0x38c>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	f003 0207 	and.w	r2, r3, #7
 8003b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4432      	add	r2, r6
 8003b30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b32:	e0b9      	b.n	8003ca8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b36:	461c      	mov	r4, r3
 8003b38:	f04f 0500 	mov.w	r5, #0
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	462b      	mov	r3, r5
 8003b40:	1891      	adds	r1, r2, r2
 8003b42:	6139      	str	r1, [r7, #16]
 8003b44:	415b      	adcs	r3, r3
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b4c:	1912      	adds	r2, r2, r4
 8003b4e:	eb45 0303 	adc.w	r3, r5, r3
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	00d9      	lsls	r1, r3, #3
 8003b5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b60:	00d0      	lsls	r0, r2, #3
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	eb12 0804 	adds.w	r8, r2, r4
 8003b6a:	eb43 0905 	adc.w	r9, r3, r5
 8003b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	008b      	lsls	r3, r1, #2
 8003b82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b86:	0082      	lsls	r2, r0, #2
 8003b88:	4640      	mov	r0, r8
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	f7fc ffce 	bl	8000b2c <__aeabi_uldivmod>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4b49      	ldr	r3, [pc, #292]	; (8003cbc <UART_SetConfig+0x38c>)
 8003b96:	fba3 2302 	umull	r2, r3, r3, r2
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	011e      	lsls	r6, r3, #4
 8003b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	1894      	adds	r4, r2, r2
 8003bac:	60bc      	str	r4, [r7, #8]
 8003bae:	415b      	adcs	r3, r3
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bb6:	1812      	adds	r2, r2, r0
 8003bb8:	eb41 0303 	adc.w	r3, r1, r3
 8003bbc:	f04f 0400 	mov.w	r4, #0
 8003bc0:	f04f 0500 	mov.w	r5, #0
 8003bc4:	00dd      	lsls	r5, r3, #3
 8003bc6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bca:	00d4      	lsls	r4, r2, #3
 8003bcc:	4622      	mov	r2, r4
 8003bce:	462b      	mov	r3, r5
 8003bd0:	1814      	adds	r4, r2, r0
 8003bd2:	64bc      	str	r4, [r7, #72]	; 0x48
 8003bd4:	414b      	adcs	r3, r1
 8003bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f04f 0100 	mov.w	r1, #0
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	008b      	lsls	r3, r1, #2
 8003bec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bf0:	0082      	lsls	r2, r0, #2
 8003bf2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003bf6:	f7fc ff99 	bl	8000b2c <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <UART_SetConfig+0x38c>)
 8003c00:	fba3 1302 	umull	r1, r3, r3, r2
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	2164      	movs	r1, #100	; 0x64
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	3332      	adds	r3, #50	; 0x32
 8003c12:	4a2a      	ldr	r2, [pc, #168]	; (8003cbc <UART_SetConfig+0x38c>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c1e:	441e      	add	r6, r3
 8003c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c22:	4618      	mov	r0, r3
 8003c24:	f04f 0100 	mov.w	r1, #0
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	1894      	adds	r4, r2, r2
 8003c2e:	603c      	str	r4, [r7, #0]
 8003c30:	415b      	adcs	r3, r3
 8003c32:	607b      	str	r3, [r7, #4]
 8003c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c38:	1812      	adds	r2, r2, r0
 8003c3a:	eb41 0303 	adc.w	r3, r1, r3
 8003c3e:	f04f 0400 	mov.w	r4, #0
 8003c42:	f04f 0500 	mov.w	r5, #0
 8003c46:	00dd      	lsls	r5, r3, #3
 8003c48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c4c:	00d4      	lsls	r4, r2, #3
 8003c4e:	4622      	mov	r2, r4
 8003c50:	462b      	mov	r3, r5
 8003c52:	eb12 0a00 	adds.w	sl, r2, r0
 8003c56:	eb43 0b01 	adc.w	fp, r3, r1
 8003c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f04f 0100 	mov.w	r1, #0
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	008b      	lsls	r3, r1, #2
 8003c6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c72:	0082      	lsls	r2, r0, #2
 8003c74:	4650      	mov	r0, sl
 8003c76:	4659      	mov	r1, fp
 8003c78:	f7fc ff58 	bl	8000b2c <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <UART_SetConfig+0x38c>)
 8003c82:	fba3 1302 	umull	r1, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2164      	movs	r1, #100	; 0x64
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	3332      	adds	r3, #50	; 0x32
 8003c94:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <UART_SetConfig+0x38c>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	f003 020f 	and.w	r2, r3, #15
 8003ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4432      	add	r2, r6
 8003ca6:	609a      	str	r2, [r3, #8]
}
 8003ca8:	bf00      	nop
 8003caa:	377c      	adds	r7, #124	; 0x7c
 8003cac:	46bd      	mov	sp, r7
 8003cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40011000 	.word	0x40011000
 8003cb8:	40011400 	.word	0x40011400
 8003cbc:	51eb851f 	.word	0x51eb851f

08003cc0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cd2:	2b84      	cmp	r3, #132	; 0x84
 8003cd4:	d005      	beq.n	8003ce2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003cd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	3303      	adds	r3, #3
 8003ce0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cf4:	f000 fbce 	bl	8004494 <vTaskStartScheduler>
  
  return osOK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d00:	b089      	sub	sp, #36	; 0x24
 8003d02:	af04      	add	r7, sp, #16
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d020      	beq.n	8003d52 <osThreadCreate+0x54>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01c      	beq.n	8003d52 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685c      	ldr	r4, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681d      	ldr	r5, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691e      	ldr	r6, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff ffc8 	bl	8003cc0 <makeFreeRtosPriority>
 8003d30:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d3a:	9202      	str	r2, [sp, #8]
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	9100      	str	r1, [sp, #0]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4632      	mov	r2, r6
 8003d44:	4629      	mov	r1, r5
 8003d46:	4620      	mov	r0, r4
 8003d48:	f000 f8d9 	bl	8003efe <xTaskCreateStatic>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e01c      	b.n	8003d8c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685c      	ldr	r4, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d5e:	b29e      	uxth	r6, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff ffaa 	bl	8003cc0 <makeFreeRtosPriority>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	f107 030c 	add.w	r3, r7, #12
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	9200      	str	r2, [sp, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	4632      	mov	r2, r6
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f000 f91b 	bl	8003fb8 <xTaskCreate>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d001      	beq.n	8003d8c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d96 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f103 0208 	add.w	r2, r3, #8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f04f 32ff 	mov.w	r2, #4294967295
 8003dae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f103 0208 	add.w	r2, r3, #8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f103 0208 	add.w	r2, r3, #8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	601a      	str	r2, [r3, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d103      	bne.n	8003e58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	e00c      	b.n	8003e72 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e002      	b.n	8003e66 <vListInsert+0x2e>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d2f6      	bcs.n	8003e60 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6892      	ldr	r2, [r2, #8]
 8003ec0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6852      	ldr	r2, [r2, #4]
 8003eca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d103      	bne.n	8003ede <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	1e5a      	subs	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b08e      	sub	sp, #56	; 0x38
 8003f02:	af04      	add	r7, sp, #16
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f24:	bf00      	nop
 8003f26:	e7fe      	b.n	8003f26 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	61fb      	str	r3, [r7, #28]
}
 8003f40:	bf00      	nop
 8003f42:	e7fe      	b.n	8003f42 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f44:	2354      	movs	r3, #84	; 0x54
 8003f46:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b54      	cmp	r3, #84	; 0x54
 8003f4c:	d00a      	beq.n	8003f64 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	61bb      	str	r3, [r7, #24]
}
 8003f60:	bf00      	nop
 8003f62:	e7fe      	b.n	8003f62 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01e      	beq.n	8003faa <xTaskCreateStatic+0xac>
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01b      	beq.n	8003faa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f84:	2300      	movs	r3, #0
 8003f86:	9303      	str	r3, [sp, #12]
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	9302      	str	r3, [sp, #8]
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f850 	bl	8004042 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fa4:	f000 f8d4 	bl	8004150 <prvAddNewTaskToReadyList>
 8003fa8:	e001      	b.n	8003fae <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fae:	697b      	ldr	r3, [r7, #20]
	}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3728      	adds	r7, #40	; 0x28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08c      	sub	sp, #48	; 0x30
 8003fbc:	af04      	add	r7, sp, #16
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 ffb3 	bl	8004f38 <pvPortMalloc>
 8003fd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00e      	beq.n	8003ff8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fda:	2054      	movs	r0, #84	; 0x54
 8003fdc:	f000 ffac 	bl	8004f38 <pvPortMalloc>
 8003fe0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
 8003fee:	e005      	b.n	8003ffc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ff0:	6978      	ldr	r0, [r7, #20]
 8003ff2:	f001 f86d 	bl	80050d0 <vPortFree>
 8003ff6:	e001      	b.n	8003ffc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d017      	beq.n	8004032 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	2300      	movs	r3, #0
 800400e:	9303      	str	r3, [sp, #12]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	9302      	str	r3, [sp, #8]
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f80e 	bl	8004042 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004026:	69f8      	ldr	r0, [r7, #28]
 8004028:	f000 f892 	bl	8004150 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800402c:	2301      	movs	r3, #1
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	e002      	b.n	8004038 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004032:	f04f 33ff 	mov.w	r3, #4294967295
 8004036:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004038:	69bb      	ldr	r3, [r7, #24]
	}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b088      	sub	sp, #32
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800405a:	3b01      	subs	r3, #1
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	f023 0307 	bic.w	r3, r3, #7
 8004068:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <prvInitialiseNewTask+0x48>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	617b      	str	r3, [r7, #20]
}
 8004086:	bf00      	nop
 8004088:	e7fe      	b.n	8004088 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01f      	beq.n	80040d0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e012      	b.n	80040bc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	7819      	ldrb	r1, [r3, #0]
 800409e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	4413      	add	r3, r2
 80040a4:	3334      	adds	r3, #52	; 0x34
 80040a6:	460a      	mov	r2, r1
 80040a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d006      	beq.n	80040c4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	d9e9      	bls.n	8004096 <prvInitialiseNewTask+0x54>
 80040c2:	e000      	b.n	80040c6 <prvInitialiseNewTask+0x84>
			{
				break;
 80040c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ce:	e003      	b.n	80040d8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d901      	bls.n	80040e2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040de:	2306      	movs	r3, #6
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	2200      	movs	r2, #0
 80040f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	3304      	adds	r3, #4
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fe6c 	bl	8003dd6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	3318      	adds	r3, #24
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fe67 	bl	8003dd6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	f1c3 0207 	rsb	r2, r3, #7
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	2200      	movs	r2, #0
 8004122:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	68f9      	ldr	r1, [r7, #12]
 8004130:	69b8      	ldr	r0, [r7, #24]
 8004132:	f000 fcf1 	bl	8004b18 <pxPortInitialiseStack>
 8004136:	4602      	mov	r2, r0
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800413c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004146:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004148:	bf00      	nop
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004158:	f000 fe0c 	bl	8004d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800415c:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <prvAddNewTaskToReadyList+0xa0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3301      	adds	r3, #1
 8004162:	4a23      	ldr	r2, [pc, #140]	; (80041f0 <prvAddNewTaskToReadyList+0xa0>)
 8004164:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004166:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <prvAddNewTaskToReadyList+0xa4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800416e:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <prvAddNewTaskToReadyList+0xa4>)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004174:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <prvAddNewTaskToReadyList+0xa0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d110      	bne.n	800419e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800417c:	f000 fb8a 	bl	8004894 <prvInitialiseTaskLists>
 8004180:	e00d      	b.n	800419e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004182:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <prvAddNewTaskToReadyList+0xa8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <prvAddNewTaskToReadyList+0xa4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	429a      	cmp	r2, r3
 8004196:	d802      	bhi.n	800419e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004198:	4a16      	ldr	r2, [pc, #88]	; (80041f4 <prvAddNewTaskToReadyList+0xa4>)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800419e:	4b17      	ldr	r3, [pc, #92]	; (80041fc <prvAddNewTaskToReadyList+0xac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3301      	adds	r3, #1
 80041a4:	4a15      	ldr	r2, [pc, #84]	; (80041fc <prvAddNewTaskToReadyList+0xac>)
 80041a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	2201      	movs	r2, #1
 80041ae:	409a      	lsls	r2, r3
 80041b0:	4b13      	ldr	r3, [pc, #76]	; (8004200 <prvAddNewTaskToReadyList+0xb0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	4a12      	ldr	r2, [pc, #72]	; (8004200 <prvAddNewTaskToReadyList+0xb0>)
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4a0f      	ldr	r2, [pc, #60]	; (8004204 <prvAddNewTaskToReadyList+0xb4>)
 80041c8:	441a      	add	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3304      	adds	r3, #4
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f7ff fe0d 	bl	8003df0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041d6:	f000 fdfd 	bl	8004dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041da:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <prvAddNewTaskToReadyList+0xa8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041e2:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <prvAddNewTaskToReadyList+0xa4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200003a4 	.word	0x200003a4
 80041f4:	200002a4 	.word	0x200002a4
 80041f8:	200003b0 	.word	0x200003b0
 80041fc:	200003c0 	.word	0x200003c0
 8004200:	200003ac 	.word	0x200003ac
 8004204:	200002a8 	.word	0x200002a8

08004208 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d017      	beq.n	800424a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <vTaskDelay+0x60>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <vTaskDelay+0x30>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60bb      	str	r3, [r7, #8]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004238:	f000 f98c 	bl	8004554 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800423c:	2100      	movs	r1, #0
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fc04 	bl	8004a4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004244:	f000 f994 	bl	8004570 <xTaskResumeAll>
 8004248:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <vTaskDelay+0x64>)
 8004252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	200003cc 	.word	0x200003cc
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004278:	f000 fd7c 	bl	8004d74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <vTaskSuspend+0x18>
 8004282:	4b3c      	ldr	r3, [pc, #240]	; (8004374 <vTaskSuspend+0x104>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	e000      	b.n	800428a <vTaskSuspend+0x1a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3304      	adds	r3, #4
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fe0a 	bl	8003eaa <uxListRemove>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d115      	bne.n	80042c8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a0:	4935      	ldr	r1, [pc, #212]	; (8004378 <vTaskSuspend+0x108>)
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <vTaskSuspend+0x58>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	2201      	movs	r2, #1
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43da      	mvns	r2, r3
 80042be:	4b2f      	ldr	r3, [pc, #188]	; (800437c <vTaskSuspend+0x10c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4013      	ands	r3, r2
 80042c4:	4a2d      	ldr	r2, [pc, #180]	; (800437c <vTaskSuspend+0x10c>)
 80042c6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3318      	adds	r3, #24
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff fde8 	bl	8003eaa <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3304      	adds	r3, #4
 80042de:	4619      	mov	r1, r3
 80042e0:	4827      	ldr	r0, [pc, #156]	; (8004380 <vTaskSuspend+0x110>)
 80042e2:	f7ff fd85 	bl	8003df0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d103      	bne.n	80042fa <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80042fa:	f000 fd6b 	bl	8004dd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80042fe:	4b21      	ldr	r3, [pc, #132]	; (8004384 <vTaskSuspend+0x114>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004306:	f000 fd35 	bl	8004d74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800430a:	f000 fb61 	bl	80049d0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800430e:	f000 fd61 	bl	8004dd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004312:	4b18      	ldr	r3, [pc, #96]	; (8004374 <vTaskSuspend+0x104>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	429a      	cmp	r2, r3
 800431a:	d127      	bne.n	800436c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800431c:	4b19      	ldr	r3, [pc, #100]	; (8004384 <vTaskSuspend+0x114>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d017      	beq.n	8004354 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004324:	4b18      	ldr	r3, [pc, #96]	; (8004388 <vTaskSuspend+0x118>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <vTaskSuspend+0xd2>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	60bb      	str	r3, [r7, #8]
}
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <vTaskSuspend+0x11c>)
 8004344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004352:	e00b      	b.n	800436c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <vTaskSuspend+0x110>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <vTaskSuspend+0x120>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d103      	bne.n	8004368 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <vTaskSuspend+0x104>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
	}
 8004366:	e001      	b.n	800436c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8004368:	f000 fa26 	bl	80047b8 <vTaskSwitchContext>
	}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200002a4 	.word	0x200002a4
 8004378:	200002a8 	.word	0x200002a8
 800437c:	200003ac 	.word	0x200003ac
 8004380:	20000390 	.word	0x20000390
 8004384:	200003b0 	.word	0x200003b0
 8004388:	200003cc 	.word	0x200003cc
 800438c:	e000ed04 	.word	0xe000ed04
 8004390:	200003a4 	.word	0x200003a4

08004394 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60fb      	str	r3, [r7, #12]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <prvTaskIsTaskSuspended+0x5c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10a      	bne.n	80043e0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <prvTaskIsTaskSuspended+0x60>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d005      	beq.n	80043e0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80043dc:	2301      	movs	r3, #1
 80043de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043e0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80043e2:	4618      	mov	r0, r3
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000390 	.word	0x20000390
 80043f4:	20000364 	.word	0x20000364

080043f8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <vTaskResume+0x28>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	60bb      	str	r3, [r7, #8]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <vTaskResume+0x90>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	429a      	cmp	r2, r3
 8004428:	d02a      	beq.n	8004480 <vTaskResume+0x88>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d027      	beq.n	8004480 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 8004430:	f000 fca0 	bl	8004d74 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff ffad 	bl	8004394 <prvTaskIsTaskSuspended>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01d      	beq.n	800447c <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3304      	adds	r3, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fd30 	bl	8003eaa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	2201      	movs	r2, #1
 8004450:	409a      	lsls	r2, r3
 8004452:	4b0e      	ldr	r3, [pc, #56]	; (800448c <vTaskResume+0x94>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4313      	orrs	r3, r2
 8004458:	4a0c      	ldr	r2, [pc, #48]	; (800448c <vTaskResume+0x94>)
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4a09      	ldr	r2, [pc, #36]	; (8004490 <vTaskResume+0x98>)
 800446a:	441a      	add	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f7ff fcbc 	bl	8003df0 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <vTaskResume+0x90>)
 800447a:	681b      	ldr	r3, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800447c:	f000 fcaa 	bl	8004dd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	200002a4 	.word	0x200002a4
 800448c:	200003ac 	.word	0x200003ac
 8004490:	200002a8 	.word	0x200002a8

08004494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	; 0x28
 8004498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044a2:	463a      	mov	r2, r7
 80044a4:	1d39      	adds	r1, r7, #4
 80044a6:	f107 0308 	add.w	r3, r7, #8
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fc fcba 	bl	8000e24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	9202      	str	r2, [sp, #8]
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	2300      	movs	r3, #0
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	460a      	mov	r2, r1
 80044c2:	491e      	ldr	r1, [pc, #120]	; (800453c <vTaskStartScheduler+0xa8>)
 80044c4:	481e      	ldr	r0, [pc, #120]	; (8004540 <vTaskStartScheduler+0xac>)
 80044c6:	f7ff fd1a 	bl	8003efe <xTaskCreateStatic>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <vTaskStartScheduler+0xb0>)
 80044ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044d0:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <vTaskStartScheduler+0xb0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044d8:	2301      	movs	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e001      	b.n	80044e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d116      	bne.n	8004516 <vTaskStartScheduler+0x82>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	613b      	str	r3, [r7, #16]
}
 80044fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044fc:	4b12      	ldr	r3, [pc, #72]	; (8004548 <vTaskStartScheduler+0xb4>)
 80044fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004502:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <vTaskStartScheduler+0xb8>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800450a:	4b11      	ldr	r3, [pc, #68]	; (8004550 <vTaskStartScheduler+0xbc>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004510:	f000 fb8e 	bl	8004c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004514:	e00e      	b.n	8004534 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d10a      	bne.n	8004534 <vTaskStartScheduler+0xa0>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	60fb      	str	r3, [r7, #12]
}
 8004530:	bf00      	nop
 8004532:	e7fe      	b.n	8004532 <vTaskStartScheduler+0x9e>
}
 8004534:	bf00      	nop
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	08005428 	.word	0x08005428
 8004540:	08004871 	.word	0x08004871
 8004544:	200003c8 	.word	0x200003c8
 8004548:	200003c4 	.word	0x200003c4
 800454c:	200003b0 	.word	0x200003b0
 8004550:	200003a8 	.word	0x200003a8

08004554 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <vTaskSuspendAll+0x18>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3301      	adds	r3, #1
 800455e:	4a03      	ldr	r2, [pc, #12]	; (800456c <vTaskSuspendAll+0x18>)
 8004560:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004562:	bf00      	nop
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	200003cc 	.word	0x200003cc

08004570 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800457e:	4b3b      	ldr	r3, [pc, #236]	; (800466c <xTaskResumeAll+0xfc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <xTaskResumeAll+0x2c>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	603b      	str	r3, [r7, #0]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800459c:	f000 fbea 	bl	8004d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045a0:	4b32      	ldr	r3, [pc, #200]	; (800466c <xTaskResumeAll+0xfc>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	4a31      	ldr	r2, [pc, #196]	; (800466c <xTaskResumeAll+0xfc>)
 80045a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045aa:	4b30      	ldr	r3, [pc, #192]	; (800466c <xTaskResumeAll+0xfc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d155      	bne.n	800465e <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045b2:	4b2f      	ldr	r3, [pc, #188]	; (8004670 <xTaskResumeAll+0x100>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d051      	beq.n	800465e <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ba:	e02e      	b.n	800461a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045bc:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <xTaskResumeAll+0x104>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3318      	adds	r3, #24
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fc6e 	bl	8003eaa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff fc69 	bl	8003eaa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	2201      	movs	r2, #1
 80045de:	409a      	lsls	r2, r3
 80045e0:	4b25      	ldr	r3, [pc, #148]	; (8004678 <xTaskResumeAll+0x108>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	4a24      	ldr	r2, [pc, #144]	; (8004678 <xTaskResumeAll+0x108>)
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4a21      	ldr	r2, [pc, #132]	; (800467c <xTaskResumeAll+0x10c>)
 80045f8:	441a      	add	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f7ff fbf5 	bl	8003df0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <xTaskResumeAll+0x110>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	429a      	cmp	r2, r3
 8004612:	d302      	bcc.n	800461a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004614:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <xTaskResumeAll+0x114>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800461a:	4b16      	ldr	r3, [pc, #88]	; (8004674 <xTaskResumeAll+0x104>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1cc      	bne.n	80045bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004628:	f000 f9d2 	bl	80049d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800462c:	4b16      	ldr	r3, [pc, #88]	; (8004688 <xTaskResumeAll+0x118>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d010      	beq.n	800465a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004638:	f000 f828 	bl	800468c <xTaskIncrementTick>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004642:	4b10      	ldr	r3, [pc, #64]	; (8004684 <xTaskResumeAll+0x114>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	3b01      	subs	r3, #1
 800464c:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f1      	bne.n	8004638 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004654:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <xTaskResumeAll+0x118>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800465a:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <xTaskResumeAll+0x114>)
 800465c:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800465e:	f000 fbb9 	bl	8004dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8004662:	687b      	ldr	r3, [r7, #4]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	200003cc 	.word	0x200003cc
 8004670:	200003a4 	.word	0x200003a4
 8004674:	20000364 	.word	0x20000364
 8004678:	200003ac 	.word	0x200003ac
 800467c:	200002a8 	.word	0x200002a8
 8004680:	200002a4 	.word	0x200002a4
 8004684:	200003b8 	.word	0x200003b8
 8004688:	200003b4 	.word	0x200003b4

0800468c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004696:	4b3f      	ldr	r3, [pc, #252]	; (8004794 <xTaskIncrementTick+0x108>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d16f      	bne.n	800477e <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800469e:	4b3e      	ldr	r3, [pc, #248]	; (8004798 <xTaskIncrementTick+0x10c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046a6:	4a3c      	ldr	r2, [pc, #240]	; (8004798 <xTaskIncrementTick+0x10c>)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d120      	bne.n	80046f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80046b2:	4b3a      	ldr	r3, [pc, #232]	; (800479c <xTaskIncrementTick+0x110>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <xTaskIncrementTick+0x46>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	603b      	str	r3, [r7, #0]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xTaskIncrementTick+0x44>
 80046d2:	4b32      	ldr	r3, [pc, #200]	; (800479c <xTaskIncrementTick+0x110>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <xTaskIncrementTick+0x114>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2f      	ldr	r2, [pc, #188]	; (800479c <xTaskIncrementTick+0x110>)
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	4a2f      	ldr	r2, [pc, #188]	; (80047a0 <xTaskIncrementTick+0x114>)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <xTaskIncrementTick+0x118>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3301      	adds	r3, #1
 80046ec:	4a2d      	ldr	r2, [pc, #180]	; (80047a4 <xTaskIncrementTick+0x118>)
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	f000 f96e 	bl	80049d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046f4:	4b2c      	ldr	r3, [pc, #176]	; (80047a8 <xTaskIncrementTick+0x11c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d344      	bcc.n	8004788 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046fe:	4b27      	ldr	r3, [pc, #156]	; (800479c <xTaskIncrementTick+0x110>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004708:	4b27      	ldr	r3, [pc, #156]	; (80047a8 <xTaskIncrementTick+0x11c>)
 800470a:	f04f 32ff 	mov.w	r2, #4294967295
 800470e:	601a      	str	r2, [r3, #0]
					break;
 8004710:	e03a      	b.n	8004788 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004712:	4b22      	ldr	r3, [pc, #136]	; (800479c <xTaskIncrementTick+0x110>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	429a      	cmp	r2, r3
 8004728:	d203      	bcs.n	8004732 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800472a:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <xTaskIncrementTick+0x11c>)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004730:	e02a      	b.n	8004788 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	3304      	adds	r3, #4
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fbb7 	bl	8003eaa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	3318      	adds	r3, #24
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fbae 	bl	8003eaa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	2201      	movs	r2, #1
 8004754:	409a      	lsls	r2, r3
 8004756:	4b15      	ldr	r3, [pc, #84]	; (80047ac <xTaskIncrementTick+0x120>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	4a13      	ldr	r2, [pc, #76]	; (80047ac <xTaskIncrementTick+0x120>)
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	4613      	mov	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <xTaskIncrementTick+0x124>)
 800476e:	441a      	add	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	3304      	adds	r3, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f7ff fb3a 	bl	8003df0 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800477c:	e7bf      	b.n	80046fe <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800477e:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <xTaskIncrementTick+0x128>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3301      	adds	r3, #1
 8004784:	4a0b      	ldr	r2, [pc, #44]	; (80047b4 <xTaskIncrementTick+0x128>)
 8004786:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004788:	697b      	ldr	r3, [r7, #20]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	200003cc 	.word	0x200003cc
 8004798:	200003a8 	.word	0x200003a8
 800479c:	2000035c 	.word	0x2000035c
 80047a0:	20000360 	.word	0x20000360
 80047a4:	200003bc 	.word	0x200003bc
 80047a8:	200003c4 	.word	0x200003c4
 80047ac:	200003ac 	.word	0x200003ac
 80047b0:	200002a8 	.word	0x200002a8
 80047b4:	200003b4 	.word	0x200003b4

080047b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047be:	4b27      	ldr	r3, [pc, #156]	; (800485c <vTaskSwitchContext+0xa4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <vTaskSwitchContext+0xa8>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047cc:	e03f      	b.n	800484e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80047ce:	4b24      	ldr	r3, [pc, #144]	; (8004860 <vTaskSwitchContext+0xa8>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d4:	4b23      	ldr	r3, [pc, #140]	; (8004864 <vTaskSwitchContext+0xac>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	fab3 f383 	clz	r3, r3
 80047e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047e2:	7afb      	ldrb	r3, [r7, #11]
 80047e4:	f1c3 031f 	rsb	r3, r3, #31
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	491f      	ldr	r1, [pc, #124]	; (8004868 <vTaskSwitchContext+0xb0>)
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <vTaskSwitchContext+0x5c>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	607b      	str	r3, [r7, #4]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <vTaskSwitchContext+0x5a>
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4a12      	ldr	r2, [pc, #72]	; (8004868 <vTaskSwitchContext+0xb0>)
 8004820:	4413      	add	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	3308      	adds	r3, #8
 8004836:	429a      	cmp	r2, r3
 8004838:	d104      	bne.n	8004844 <vTaskSwitchContext+0x8c>
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	605a      	str	r2, [r3, #4]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	4a08      	ldr	r2, [pc, #32]	; (800486c <vTaskSwitchContext+0xb4>)
 800484c:	6013      	str	r3, [r2, #0]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	200003cc 	.word	0x200003cc
 8004860:	200003b8 	.word	0x200003b8
 8004864:	200003ac 	.word	0x200003ac
 8004868:	200002a8 	.word	0x200002a8
 800486c:	200002a4 	.word	0x200002a4

08004870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004878:	f000 f84c 	bl	8004914 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <prvIdleTask+0x20>)
 800487e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800488c:	e7f4      	b.n	8004878 <prvIdleTask+0x8>
 800488e:	bf00      	nop
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	e00c      	b.n	80048ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <prvInitialiseTaskLists+0x60>)
 80048ac:	4413      	add	r3, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fa71 	bl	8003d96 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3301      	adds	r3, #1
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b06      	cmp	r3, #6
 80048be:	d9ef      	bls.n	80048a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048c0:	480d      	ldr	r0, [pc, #52]	; (80048f8 <prvInitialiseTaskLists+0x64>)
 80048c2:	f7ff fa68 	bl	8003d96 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048c6:	480d      	ldr	r0, [pc, #52]	; (80048fc <prvInitialiseTaskLists+0x68>)
 80048c8:	f7ff fa65 	bl	8003d96 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048cc:	480c      	ldr	r0, [pc, #48]	; (8004900 <prvInitialiseTaskLists+0x6c>)
 80048ce:	f7ff fa62 	bl	8003d96 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048d2:	480c      	ldr	r0, [pc, #48]	; (8004904 <prvInitialiseTaskLists+0x70>)
 80048d4:	f7ff fa5f 	bl	8003d96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048d8:	480b      	ldr	r0, [pc, #44]	; (8004908 <prvInitialiseTaskLists+0x74>)
 80048da:	f7ff fa5c 	bl	8003d96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <prvInitialiseTaskLists+0x78>)
 80048e0:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <prvInitialiseTaskLists+0x64>)
 80048e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <prvInitialiseTaskLists+0x7c>)
 80048e6:	4a05      	ldr	r2, [pc, #20]	; (80048fc <prvInitialiseTaskLists+0x68>)
 80048e8:	601a      	str	r2, [r3, #0]
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200002a8 	.word	0x200002a8
 80048f8:	20000334 	.word	0x20000334
 80048fc:	20000348 	.word	0x20000348
 8004900:	20000364 	.word	0x20000364
 8004904:	20000378 	.word	0x20000378
 8004908:	20000390 	.word	0x20000390
 800490c:	2000035c 	.word	0x2000035c
 8004910:	20000360 	.word	0x20000360

08004914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800491a:	e019      	b.n	8004950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800491c:	f000 fa2a 	bl	8004d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004920:	4b10      	ldr	r3, [pc, #64]	; (8004964 <prvCheckTasksWaitingTermination+0x50>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fabc 	bl	8003eaa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004932:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	4a0b      	ldr	r2, [pc, #44]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 800493a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <prvCheckTasksWaitingTermination+0x58>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	4a0a      	ldr	r2, [pc, #40]	; (800496c <prvCheckTasksWaitingTermination+0x58>)
 8004944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004946:	f000 fa45 	bl	8004dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f810 	bl	8004970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004950:	4b06      	ldr	r3, [pc, #24]	; (800496c <prvCheckTasksWaitingTermination+0x58>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e1      	bne.n	800491c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000378 	.word	0x20000378
 8004968:	200003a4 	.word	0x200003a4
 800496c:	2000038c 	.word	0x2000038c

08004970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800497e:	2b00      	cmp	r3, #0
 8004980:	d108      	bne.n	8004994 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fba2 	bl	80050d0 <vPortFree>
				vPortFree( pxTCB );
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fb9f 	bl	80050d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004992:	e018      	b.n	80049c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800499a:	2b01      	cmp	r3, #1
 800499c:	d103      	bne.n	80049a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fb96 	bl	80050d0 <vPortFree>
	}
 80049a4:	e00f      	b.n	80049c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d00a      	beq.n	80049c6 <prvDeleteTCB+0x56>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	60fb      	str	r3, [r7, #12]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <prvDeleteTCB+0x54>
	}
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <prvResetNextTaskUnblockTime+0x38>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d104      	bne.n	80049ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <prvResetNextTaskUnblockTime+0x3c>)
 80049e2:	f04f 32ff 	mov.w	r2, #4294967295
 80049e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049e8:	e008      	b.n	80049fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ea:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <prvResetNextTaskUnblockTime+0x38>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <prvResetNextTaskUnblockTime+0x3c>)
 80049fa:	6013      	str	r3, [r2, #0]
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	2000035c 	.word	0x2000035c
 8004a0c:	200003c4 	.word	0x200003c4

08004a10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <xTaskGetSchedulerState+0x34>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d102      	bne.n	8004a24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	e008      	b.n	8004a36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a24:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <xTaskGetSchedulerState+0x38>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	607b      	str	r3, [r7, #4]
 8004a30:	e001      	b.n	8004a36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a32:	2300      	movs	r3, #0
 8004a34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a36:	687b      	ldr	r3, [r7, #4]
	}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	200003b0 	.word	0x200003b0
 8004a48:	200003cc 	.word	0x200003cc

08004a4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a56:	4b29      	ldr	r3, [pc, #164]	; (8004afc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a5c:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3304      	adds	r3, #4
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fa21 	bl	8003eaa <uxListRemove>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10b      	bne.n	8004a86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a6e:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	2201      	movs	r2, #1
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	4b21      	ldr	r3, [pc, #132]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4013      	ands	r3, r2
 8004a82:	4a20      	ldr	r2, [pc, #128]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d10a      	bne.n	8004aa4 <prvAddCurrentTaskToDelayedList+0x58>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a94:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	481a      	ldr	r0, [pc, #104]	; (8004b08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a9e:	f7ff f9a7 	bl	8003df0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004aa2:	e026      	b.n	8004af2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004aac:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d209      	bcs.n	8004ad0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004abc:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f7ff f9b5 	bl	8003e38 <vListInsert>
}
 8004ace:	e010      	b.n	8004af2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7ff f9ab 	bl	8003e38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ae2:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d202      	bcs.n	8004af2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004aec:	4a09      	ldr	r2, [pc, #36]	; (8004b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6013      	str	r3, [r2, #0]
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	200003a8 	.word	0x200003a8
 8004b00:	200002a4 	.word	0x200002a4
 8004b04:	200003ac 	.word	0x200003ac
 8004b08:	20000390 	.word	0x20000390
 8004b0c:	20000360 	.word	0x20000360
 8004b10:	2000035c 	.word	0x2000035c
 8004b14:	200003c4 	.word	0x200003c4

08004b18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3b04      	subs	r3, #4
 8004b28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f023 0201 	bic.w	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3b04      	subs	r3, #4
 8004b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b48:	4a0c      	ldr	r2, [pc, #48]	; (8004b7c <pxPortInitialiseStack+0x64>)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b14      	subs	r3, #20
 8004b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b04      	subs	r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f06f 0202 	mvn.w	r2, #2
 8004b66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3b20      	subs	r3, #32
 8004b6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	08004b81 	.word	0x08004b81

08004b80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <prvTaskExitError+0x54>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d00a      	beq.n	8004baa <prvTaskExitError+0x2a>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	60fb      	str	r3, [r7, #12]
}
 8004ba6:	bf00      	nop
 8004ba8:	e7fe      	b.n	8004ba8 <prvTaskExitError+0x28>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	60bb      	str	r3, [r7, #8]
}
 8004bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bbe:	bf00      	nop
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0fc      	beq.n	8004bc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	20000030 	.word	0x20000030
	...

08004be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <pxCurrentTCBConst2>)
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	6808      	ldr	r0, [r1, #0]
 8004be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	f380 8809 	msr	PSP, r0
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8811 	msr	BASEPRI, r0
 8004bfa:	4770      	bx	lr
 8004bfc:	f3af 8000 	nop.w

08004c00 <pxCurrentTCBConst2>:
 8004c00:	200002a4 	.word	0x200002a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c08:	4808      	ldr	r0, [pc, #32]	; (8004c2c <prvPortStartFirstTask+0x24>)
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	6800      	ldr	r0, [r0, #0]
 8004c0e:	f380 8808 	msr	MSP, r0
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8814 	msr	CONTROL, r0
 8004c1a:	b662      	cpsie	i
 8004c1c:	b661      	cpsie	f
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	df00      	svc	0
 8004c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c2a:	bf00      	nop
 8004c2c:	e000ed08 	.word	0xe000ed08

08004c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c36:	4b46      	ldr	r3, [pc, #280]	; (8004d50 <xPortStartScheduler+0x120>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a46      	ldr	r2, [pc, #280]	; (8004d54 <xPortStartScheduler+0x124>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10a      	bne.n	8004c56 <xPortStartScheduler+0x26>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	613b      	str	r3, [r7, #16]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c56:	4b3e      	ldr	r3, [pc, #248]	; (8004d50 <xPortStartScheduler+0x120>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <xPortStartScheduler+0x128>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10a      	bne.n	8004c76 <xPortStartScheduler+0x46>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c76:	4b39      	ldr	r3, [pc, #228]	; (8004d5c <xPortStartScheduler+0x12c>)
 8004c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	22ff      	movs	r2, #255	; 0xff
 8004c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <xPortStartScheduler+0x130>)
 8004c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c9e:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <xPortStartScheduler+0x134>)
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ca4:	e009      	b.n	8004cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ca6:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <xPortStartScheduler+0x134>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	4a2d      	ldr	r2, [pc, #180]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d0ef      	beq.n	8004ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cc6:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f1c3 0307 	rsb	r3, r3, #7
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d00a      	beq.n	8004ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	60bb      	str	r3, [r7, #8]
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d06:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a14      	ldr	r2, [pc, #80]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d1e:	f000 f8dd 	bl	8004edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <xPortStartScheduler+0x13c>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d28:	f000 f8fc 	bl	8004f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d2c:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <xPortStartScheduler+0x140>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0f      	ldr	r2, [pc, #60]	; (8004d70 <xPortStartScheduler+0x140>)
 8004d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d38:	f7ff ff66 	bl	8004c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d3c:	f7ff fd3c 	bl	80047b8 <vTaskSwitchContext>
	prvTaskExitError();
 8004d40:	f7ff ff1e 	bl	8004b80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	e000ed00 	.word	0xe000ed00
 8004d54:	410fc271 	.word	0x410fc271
 8004d58:	410fc270 	.word	0x410fc270
 8004d5c:	e000e400 	.word	0xe000e400
 8004d60:	200003d0 	.word	0x200003d0
 8004d64:	200003d4 	.word	0x200003d4
 8004d68:	e000ed20 	.word	0xe000ed20
 8004d6c:	20000030 	.word	0x20000030
 8004d70:	e000ef34 	.word	0xe000ef34

08004d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	607b      	str	r3, [r7, #4]
}
 8004d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d8e:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <vPortEnterCritical+0x58>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <vPortEnterCritical+0x58>)
 8004d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d98:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <vPortEnterCritical+0x58>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10f      	bne.n	8004dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <vPortEnterCritical+0x5c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	603b      	str	r3, [r7, #0]
}
 8004dbc:	bf00      	nop
 8004dbe:	e7fe      	b.n	8004dbe <vPortEnterCritical+0x4a>
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	20000030 	.word	0x20000030
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <vPortExitCritical+0x50>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <vPortExitCritical+0x24>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	607b      	str	r3, [r7, #4]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <vPortExitCritical+0x50>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <vPortExitCritical+0x50>)
 8004e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e02:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <vPortExitCritical+0x50>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d105      	bne.n	8004e16 <vPortExitCritical+0x42>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000030 	.word	0x20000030
	...

08004e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e30:	f3ef 8009 	mrs	r0, PSP
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <pxCurrentTCBConst>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	f01e 0f10 	tst.w	lr, #16
 8004e40:	bf08      	it	eq
 8004e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4a:	6010      	str	r0, [r2, #0]
 8004e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e54:	f380 8811 	msr	BASEPRI, r0
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f7ff fcaa 	bl	80047b8 <vTaskSwitchContext>
 8004e64:	f04f 0000 	mov.w	r0, #0
 8004e68:	f380 8811 	msr	BASEPRI, r0
 8004e6c:	bc09      	pop	{r0, r3}
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	6808      	ldr	r0, [r1, #0]
 8004e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e76:	f01e 0f10 	tst.w	lr, #16
 8004e7a:	bf08      	it	eq
 8004e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e80:	f380 8809 	msr	PSP, r0
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	f3af 8000 	nop.w

08004e90 <pxCurrentTCBConst>:
 8004e90:	200002a4 	.word	0x200002a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop

08004e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	607b      	str	r3, [r7, #4]
}
 8004eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004eb2:	f7ff fbeb 	bl	800468c <xTaskIncrementTick>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <xPortSysTickHandler+0x40>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f383 8811 	msr	BASEPRI, r3
}
 8004ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <vPortSetupTimerInterrupt+0x34>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <vPortSetupTimerInterrupt+0x38>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eec:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <vPortSetupTimerInterrupt+0x3c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <vPortSetupTimerInterrupt+0x40>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <vPortSetupTimerInterrupt+0x44>)
 8004efa:	3b01      	subs	r3, #1
 8004efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004efe:	4b04      	ldr	r3, [pc, #16]	; (8004f10 <vPortSetupTimerInterrupt+0x34>)
 8004f00:	2207      	movs	r2, #7
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	e000e010 	.word	0xe000e010
 8004f14:	e000e018 	.word	0xe000e018
 8004f18:	20000024 	.word	0x20000024
 8004f1c:	10624dd3 	.word	0x10624dd3
 8004f20:	e000e014 	.word	0xe000e014

08004f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f34 <vPortEnableVFP+0x10>
 8004f28:	6801      	ldr	r1, [r0, #0]
 8004f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f2e:	6001      	str	r1, [r0, #0]
 8004f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f32:	bf00      	nop
 8004f34:	e000ed88 	.word	0xe000ed88

08004f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	; 0x28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f44:	f7ff fb06 	bl	8004554 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f48:	4b5b      	ldr	r3, [pc, #364]	; (80050b8 <pvPortMalloc+0x180>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f50:	f000 f920 	bl	8005194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f54:	4b59      	ldr	r3, [pc, #356]	; (80050bc <pvPortMalloc+0x184>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 8093 	bne.w	8005088 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01d      	beq.n	8004fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f68:	2208      	movs	r2, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d014      	beq.n	8004fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f023 0307 	bic.w	r3, r3, #7
 8004f80:	3308      	adds	r3, #8
 8004f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	617b      	str	r3, [r7, #20]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d06e      	beq.n	8005088 <pvPortMalloc+0x150>
 8004faa:	4b45      	ldr	r3, [pc, #276]	; (80050c0 <pvPortMalloc+0x188>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d869      	bhi.n	8005088 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fb4:	4b43      	ldr	r3, [pc, #268]	; (80050c4 <pvPortMalloc+0x18c>)
 8004fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fb8:	4b42      	ldr	r3, [pc, #264]	; (80050c4 <pvPortMalloc+0x18c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fbe:	e004      	b.n	8004fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d903      	bls.n	8004fdc <pvPortMalloc+0xa4>
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f1      	bne.n	8004fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fdc:	4b36      	ldr	r3, [pc, #216]	; (80050b8 <pvPortMalloc+0x180>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d050      	beq.n	8005088 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2208      	movs	r2, #8
 8004fec:	4413      	add	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	1ad2      	subs	r2, r2, r3
 8005000:	2308      	movs	r3, #8
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	429a      	cmp	r2, r3
 8005006:	d91f      	bls.n	8005048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <pvPortMalloc+0xf8>
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	613b      	str	r3, [r7, #16]
}
 800502c:	bf00      	nop
 800502e:	e7fe      	b.n	800502e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	1ad2      	subs	r2, r2, r3
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005042:	69b8      	ldr	r0, [r7, #24]
 8005044:	f000 f908 	bl	8005258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005048:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <pvPortMalloc+0x188>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <pvPortMalloc+0x188>)
 8005054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005056:	4b1a      	ldr	r3, [pc, #104]	; (80050c0 <pvPortMalloc+0x188>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <pvPortMalloc+0x190>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d203      	bcs.n	800506a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005062:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <pvPortMalloc+0x188>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a18      	ldr	r2, [pc, #96]	; (80050c8 <pvPortMalloc+0x190>)
 8005068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	4b13      	ldr	r3, [pc, #76]	; (80050bc <pvPortMalloc+0x184>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	431a      	orrs	r2, r3
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800507e:	4b13      	ldr	r3, [pc, #76]	; (80050cc <pvPortMalloc+0x194>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	4a11      	ldr	r2, [pc, #68]	; (80050cc <pvPortMalloc+0x194>)
 8005086:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005088:	f7ff fa72 	bl	8004570 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <pvPortMalloc+0x174>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	60fb      	str	r3, [r7, #12]
}
 80050a8:	bf00      	nop
 80050aa:	e7fe      	b.n	80050aa <pvPortMalloc+0x172>
	return pvReturn;
 80050ac:	69fb      	ldr	r3, [r7, #28]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3728      	adds	r7, #40	; 0x28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20003fe0 	.word	0x20003fe0
 80050bc:	20003ff4 	.word	0x20003ff4
 80050c0:	20003fe4 	.word	0x20003fe4
 80050c4:	20003fd8 	.word	0x20003fd8
 80050c8:	20003fe8 	.word	0x20003fe8
 80050cc:	20003fec 	.word	0x20003fec

080050d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d04d      	beq.n	800517e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050e2:	2308      	movs	r3, #8
 80050e4:	425b      	negs	r3, r3
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4413      	add	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	4b24      	ldr	r3, [pc, #144]	; (8005188 <vPortFree+0xb8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <vPortFree+0x44>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	60fb      	str	r3, [r7, #12]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <vPortFree+0x62>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	60bb      	str	r3, [r7, #8]
}
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	4b14      	ldr	r3, [pc, #80]	; (8005188 <vPortFree+0xb8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01e      	beq.n	800517e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d11a      	bne.n	800517e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <vPortFree+0xb8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	43db      	mvns	r3, r3
 8005152:	401a      	ands	r2, r3
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005158:	f7ff f9fc 	bl	8004554 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <vPortFree+0xbc>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4413      	add	r3, r2
 8005166:	4a09      	ldr	r2, [pc, #36]	; (800518c <vPortFree+0xbc>)
 8005168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800516a:	6938      	ldr	r0, [r7, #16]
 800516c:	f000 f874 	bl	8005258 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005170:	4b07      	ldr	r3, [pc, #28]	; (8005190 <vPortFree+0xc0>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	4a06      	ldr	r2, [pc, #24]	; (8005190 <vPortFree+0xc0>)
 8005178:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800517a:	f7ff f9f9 	bl	8004570 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800517e:	bf00      	nop
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20003ff4 	.word	0x20003ff4
 800518c:	20003fe4 	.word	0x20003fe4
 8005190:	20003ff0 	.word	0x20003ff0

08005194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800519a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800519e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051a0:	4b27      	ldr	r3, [pc, #156]	; (8005240 <prvHeapInit+0xac>)
 80051a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00c      	beq.n	80051c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3307      	adds	r3, #7
 80051b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0307 	bic.w	r3, r3, #7
 80051ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <prvHeapInit+0xac>)
 80051c4:	4413      	add	r3, r2
 80051c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051cc:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <prvHeapInit+0xb0>)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051d2:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <prvHeapInit+0xb0>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4413      	add	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051e0:	2208      	movs	r2, #8
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0307 	bic.w	r3, r3, #7
 80051ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4a15      	ldr	r2, [pc, #84]	; (8005248 <prvHeapInit+0xb4>)
 80051f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051f6:	4b14      	ldr	r3, [pc, #80]	; (8005248 <prvHeapInit+0xb4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2200      	movs	r2, #0
 80051fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051fe:	4b12      	ldr	r3, [pc, #72]	; (8005248 <prvHeapInit+0xb4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005214:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <prvHeapInit+0xb4>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4a0a      	ldr	r2, [pc, #40]	; (800524c <prvHeapInit+0xb8>)
 8005222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4a09      	ldr	r2, [pc, #36]	; (8005250 <prvHeapInit+0xbc>)
 800522a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800522c:	4b09      	ldr	r3, [pc, #36]	; (8005254 <prvHeapInit+0xc0>)
 800522e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005232:	601a      	str	r2, [r3, #0]
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	200003d8 	.word	0x200003d8
 8005244:	20003fd8 	.word	0x20003fd8
 8005248:	20003fe0 	.word	0x20003fe0
 800524c:	20003fe8 	.word	0x20003fe8
 8005250:	20003fe4 	.word	0x20003fe4
 8005254:	20003ff4 	.word	0x20003ff4

08005258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005260:	4b28      	ldr	r3, [pc, #160]	; (8005304 <prvInsertBlockIntoFreeList+0xac>)
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	e002      	b.n	800526c <prvInsertBlockIntoFreeList+0x14>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	429a      	cmp	r2, r3
 8005274:	d8f7      	bhi.n	8005266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	4413      	add	r3, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	429a      	cmp	r2, r3
 8005286:	d108      	bne.n	800529a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	441a      	add	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	441a      	add	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d118      	bne.n	80052e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b15      	ldr	r3, [pc, #84]	; (8005308 <prvInsertBlockIntoFreeList+0xb0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d00d      	beq.n	80052d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	441a      	add	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	e008      	b.n	80052e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <prvInsertBlockIntoFreeList+0xb0>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e003      	b.n	80052e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d002      	beq.n	80052f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	20003fd8 	.word	0x20003fd8
 8005308:	20003fe0 	.word	0x20003fe0

0800530c <__libc_init_array>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	4d0d      	ldr	r5, [pc, #52]	; (8005344 <__libc_init_array+0x38>)
 8005310:	4c0d      	ldr	r4, [pc, #52]	; (8005348 <__libc_init_array+0x3c>)
 8005312:	1b64      	subs	r4, r4, r5
 8005314:	10a4      	asrs	r4, r4, #2
 8005316:	2600      	movs	r6, #0
 8005318:	42a6      	cmp	r6, r4
 800531a:	d109      	bne.n	8005330 <__libc_init_array+0x24>
 800531c:	4d0b      	ldr	r5, [pc, #44]	; (800534c <__libc_init_array+0x40>)
 800531e:	4c0c      	ldr	r4, [pc, #48]	; (8005350 <__libc_init_array+0x44>)
 8005320:	f000 f820 	bl	8005364 <_init>
 8005324:	1b64      	subs	r4, r4, r5
 8005326:	10a4      	asrs	r4, r4, #2
 8005328:	2600      	movs	r6, #0
 800532a:	42a6      	cmp	r6, r4
 800532c:	d105      	bne.n	800533a <__libc_init_array+0x2e>
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	f855 3b04 	ldr.w	r3, [r5], #4
 8005334:	4798      	blx	r3
 8005336:	3601      	adds	r6, #1
 8005338:	e7ee      	b.n	8005318 <__libc_init_array+0xc>
 800533a:	f855 3b04 	ldr.w	r3, [r5], #4
 800533e:	4798      	blx	r3
 8005340:	3601      	adds	r6, #1
 8005342:	e7f2      	b.n	800532a <__libc_init_array+0x1e>
 8005344:	08005458 	.word	0x08005458
 8005348:	08005458 	.word	0x08005458
 800534c:	08005458 	.word	0x08005458
 8005350:	0800545c 	.word	0x0800545c

08005354 <memset>:
 8005354:	4402      	add	r2, r0
 8005356:	4603      	mov	r3, r0
 8005358:	4293      	cmp	r3, r2
 800535a:	d100      	bne.n	800535e <memset+0xa>
 800535c:	4770      	bx	lr
 800535e:	f803 1b01 	strb.w	r1, [r3], #1
 8005362:	e7f9      	b.n	8005358 <memset+0x4>

08005364 <_init>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr

08005370 <_fini>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	bf00      	nop
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr
